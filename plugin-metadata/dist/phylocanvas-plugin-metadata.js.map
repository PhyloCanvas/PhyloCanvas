{"version":3,"sources":["webpack://PhylocanvasPluginMetadata/webpack/universalModuleDefinition","webpack://PhylocanvasPluginMetadata/webpack/bootstrap","webpack://PhylocanvasPluginMetadata/external \"@cgps/phylocanvas\"","webpack://PhylocanvasPluginMetadata/./defaults.js","webpack://PhylocanvasPluginMetadata/./index.js"],"names":["root","factory","exports","module","require","define","amd","window","__WEBPACK_EXTERNAL_MODULE__0__","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","blockFontSize","blockLength","blockSize","blockPadding","columns","fillStyle","headerFontWeight","showLabels","showHeaders","textPadding","values","mapScalar","utils","Angles","constants","TreeTypes","mapScalarValues","tree","mappedValues","keys","state","scale","decorate","delegate","args","metadata","defaults","layout","fontSize","columnWidths","headerWidths","columnName","maxLabel","leafNodes","node","id","data","label","length","console","error","measureTextWidth","ctx","metadataLeafIds","Set","typeDef","types","type","renderMetadataHeaders","mainAxis","alignableLabels","alignLabels","renderMetadataLabels","columnNames","save","startingX","showNodes","_","actualNodeSize","renderLeafLabels","actualMaxLabelWidth","textAlign","textBaseline","font","actualFontSize","fontFamily","angle","Degrees90","translate","x","y","rotate","branchScale","rootNode","longestLeaf","distanceFromRoot","stepScale","index","columnWidth","Math","max","translateX","translateY","fillText","maxSize","stepCorrection","Circular","leafAngle","Degrees360","totalLeaves","totalLeafLength","Radial","min","has","beginPath","isHidden","colour","fillRect","renderLabels","invertedLabel","Degrees270","Degrees180","closePath","restore","area","maxLabelWidth","preX","postX","preY","postY","Rectangular","Diagonal","Hierarchical","width","height","left","top","right","bottom"],"mappings":"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","file":"phylocanvas-plugin-metadata.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"@cgps/phylocanvas\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"@cgps/phylocanvas\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"PhylocanvasPluginMetadata\"] = factory(require(\"@cgps/phylocanvas\"));\n\telse\n\t\troot[\"PhylocanvasPluginMetadata\"] = factory(root[\"@cgps/phylocanvas\"]);\n})(window, function(__WEBPACK_EXTERNAL_MODULE__0__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/dist/\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n","module.exports = __WEBPACK_EXTERNAL_MODULE__0__;","export default {\n  blockFontSize: null,\n  blockLength: 16,\n  blockSize: null,\n  blockPadding: 0,\n  columns: [],\n  fillStyle: 'black',\n  headerFontWeight: 'bold',\n  showLabels: true,\n  showHeaders: true,\n  textPadding: 4,\n  values: {},\n};\n","/* eslint default-case: 0 */\n\nimport { constants, types, utils } from '@cgps/phylocanvas';\nimport defaults from './defaults';\nconst { mapScalar } = utils;\n\nconst { Angles, TreeTypes } = constants;\n\nfunction mapScalarValues(tree, values) {\n  const mappedValues = {};\n  for (const key of Object.keys(values)) {\n    mappedValues[key] = (values[key] / tree.state.scale);\n  }\n  return mappedValues;\n}\n\nexport default function (tree, decorate) {\n  decorate('getInitialState', (delegate, args) => {\n    const [ options ] = args;\n    const { metadata = {} } = options;\n    return {\n      ...delegate(...args),\n      metadata: {\n        ...defaults,\n        ...metadata,\n      },\n    };\n  });\n\n  decorate('layout', (delegate, args) => {\n    const { state } = tree;\n    const layout = delegate(...args);\n\n    if (!layout.metadata) {\n      layout.metadata = {};\n    }\n\n    if (\n      layout.metadata.values !== state.metadata.values ||\n      layout.metadata.columns !== state.metadata.columns ||\n      layout.metadata.blockPadding !== state.metadata.blockPadding ||\n      layout.metadata.blockLength !== state.metadata.blockLength ||\n      layout.metadata.fontSize !== state.fontSize\n    ) {\n      layout.metadata.columnWidths = {};\n      layout.metadata.headerWidths = {};\n\n      for (const columnName of state.metadata.columns) {\n        // find the text of the longest label of the column\n        let maxLabel = '';\n        for (const node of layout.leafNodes) {\n          if (!(node.id in state.metadata.values)) continue;\n          const data = state.metadata.values[node.id][columnName];\n          if (data) {\n            if (typeof(data.label) === 'string') {\n              if (data.label.length > maxLabel.length) {\n                maxLabel = data.label;\n              }\n            } else {\n              console.error('Invalid metadata label for node ', node.id, ' column ', columnName);\n            }\n          }\n        }\n\n        // measure the actual width of the longest label if found\n        if (maxLabel.length) {\n          layout.metadata.columnWidths[columnName] = tree.measureTextWidth(maxLabel);\n        } else {\n          layout.metadata.columnWidths[columnName] = 0;\n        }\n\n        // measure the width of the header label\n        layout.metadata.headerWidths[columnName] = 2 * state.fontSize + tree.measureTextWidth(columnName, state.metadata.headerFontWeight);\n      }\n    }\n\n    layout.metadata.blockLength = state.metadata.blockLength;\n    layout.metadata.blockPadding = state.metadata.blockPadding;\n    layout.metadata.columns = state.metadata.columns;\n    layout.metadata.values = state.metadata.values;\n    layout.metadata.fontSize = state.fontSize;\n\n    return layout;\n  });\n\n  decorate('postRender', (delegate, args) => {\n    const { ctx, state } = tree;\n    const [ layout ] = args;\n    const blockLength = mapScalar(tree, state.metadata.blockLength);\n    const blockPadding = mapScalar(tree, state.metadata.blockPadding);\n    const headerWidths = mapScalarValues(tree, layout.metadata.headerWidths);\n    const columnWidths = mapScalarValues(tree, layout.metadata.columnWidths);\n    const textPadding = mapScalar(tree, state.metadata.textPadding);\n    const metadataLeafIds = new Set(Object.keys(state.metadata.values));\n    const typeDef = types[state.type];\n    const renderMetadataHeaders = (\n      state.metadata.showHeaders &&\n      typeDef.mainAxis &&\n      (!typeDef.alignableLabels || typeDef.alignableLabels && tree.state.alignLabels)\n    );\n    const renderMetadataLabels = state.metadata.showLabels;\n\n    // draw all columns when no columns specified\n    const columnNames = state.metadata.columns || [];\n\n    ctx.save();\n    ctx.fillStyle = state.metadata.fillStyle;\n\n    let startingX = textPadding;\n    if (state.showNodes) {\n      startingX += tree._.actualNodeSize;\n    }\n    if (state.renderLeafLabels) {\n      startingX += tree._.actualMaxLabelWidth;\n    }\n\n    // render metadata headers\n    if (renderMetadataHeaders) {\n      ctx.textAlign = 'left';\n      ctx.textBaseline = 'middle';\n      ctx.font = `${state.metadata.headerFontWeight} ${tree._.actualFontSize}px ${state.fontFamily}`;\n      const node = layout.leafNodes[0];\n      let angle = node.angle;\n      if (!state.metadata.showLabels) {\n        angle += Angles.Degrees90;\n      }\n      ctx.translate(node.x, node.y);\n      ctx.rotate(node.angle);\n\n      let x = startingX;\n      if (typeDef.alignableLabels) {\n        x += (tree.state.branchScale * (layout.rootNode.longestLeaf - node.distanceFromRoot));\n      }\n      const y = (state.stepScale * -0.5);\n\n      for (let index = 0; index < columnNames.length; index++) {\n        const columnName = columnNames[index];\n        let columnWidth = blockPadding;\n\n        if (renderMetadataLabels) {\n          columnWidth += Math.max(\n            headerWidths[columnName],\n            blockPadding + blockLength + columnWidths[columnName]\n          );\n        } else {\n          columnWidth += blockLength;\n        }\n\n        const translateX =\n          renderMetadataLabels ?\n            x + blockPadding + blockLength + textPadding :\n            x + blockPadding + blockLength / 2;\n        const translateY =\n          renderMetadataLabels ?\n            y - tree._.actualFontSize / 2 :\n            y - textPadding;\n\n        ctx.translate(translateX, translateY);\n        if (!renderMetadataLabels) {\n          ctx.rotate(-Angles.Degrees90);\n        }\n        ctx.fillText(columnName, 0, 0);\n        if (!renderMetadataLabels) {\n          ctx.rotate(Angles.Degrees90);\n        }\n        ctx.translate(-1 * translateX, -1 * translateY);\n\n        x += columnWidth;\n      }\n      ctx.rotate(-node.angle);\n      ctx.translate(-node.x, -node.y);\n    }\n\n    // block size should not be greater than tree step or max angle\n    let maxSize = state.stepScale;\n    let stepCorrection = 0;\n    if (state.type === TreeTypes.Circular && tree.state.alignLabels) {\n      const leafAngle = Angles.Degrees360 / layout.rootNode.totalLeaves;\n      maxSize = leafAngle * (layout.rootNode.totalLeafLength * tree.state.branchScale + tree._.actualNodeSize + tree._.actualMaxLabelWidth);\n      stepCorrection = leafAngle * (blockLength + blockPadding);\n    } else if (state.type === TreeTypes.Radial) {\n      maxSize = tree._.actualNodeSize;\n    }\n    const blockSize = Math.min(maxSize, state.blockSize || maxSize);\n\n    ctx.font = `${tree._.actualFontSize}px ${state.fontFamily}`;\n\n    // render metadata blocks for each leaf node\n    for (const node of layout.leafNodes) {\n      if (metadataLeafIds.has(node.id)) {\n        const data = state.metadata.values[node.id];\n\n        ctx.translate(node.x, node.y);\n        ctx.rotate(node.angle);\n        ctx.beginPath();\n\n        let x = startingX;\n        const y = 0;\n\n        if (typeDef.alignableLabels && tree.state.alignLabels) {\n          x += tree.state.branchScale * (layout.rootNode.longestLeaf - node.distanceFromRoot);\n        }\n\n        for (let index = 0; index < columnNames.length; index++) {\n          const columnName = columnNames[index];\n          if (typeof data[columnName] !== 'undefined' && !node.isHidden) {\n            // render block\n            ctx.fillStyle = data[columnName].colour || data[columnName];\n            ctx.fillRect(x + blockPadding, y - blockSize / 2, blockLength, blockSize + (index * stepCorrection));\n\n            // reset fill colour to default\n            ctx.fillStyle = state.metadata.fillStyle;\n\n            // render block label\n            if (tree._.renderLabels && renderMetadataLabels && typeof data[columnName].label === 'string') {\n              const invertedLabel = (node.angle > Angles.Degrees90) && (node.angle < Angles.Degrees270);\n              if (invertedLabel) {\n                ctx.rotate(Angles.Degrees180);\n              }\n              ctx.textAlign = invertedLabel ? 'right' : 'left';\n              ctx.textBaseline = 'middle';\n              ctx.fillText(\n                data[columnName].label,\n                (invertedLabel ? -1 : 1) * (x + blockPadding + blockLength + textPadding),\n                y\n              );\n              if (invertedLabel) {\n                ctx.rotate(-Angles.Degrees180);\n              }\n            }\n          }\n          const columnWidth = blockPadding + Math.max(\n            (renderMetadataHeaders && renderMetadataLabels) ? headerWidths[columnName] : 0,\n            renderMetadataLabels ? (blockPadding + blockLength + columnWidths[columnName]) : blockLength\n          );\n          x += columnWidth;\n        }\n        ctx.closePath();\n        ctx.rotate(-node.angle);\n        ctx.translate(-node.x, -node.y);\n      }\n    }\n\n    ctx.restore();\n\n    delegate(...args);\n  });\n\n  decorate('getDrawingArea', (delegate, args) => {\n    const area = delegate(...args);\n\n    const typeDef = types[tree.state.type];\n    const layout = tree.layout();\n\n    // these measurments are on the canvas plane therefore they need not to be mapped\n    const blockLength = tree.state.metadata.blockLength;\n    const blockPadding = tree.state.metadata.blockPadding;\n    const headerWidths = layout.metadata.headerWidths;\n    const columnWidths = layout.metadata.columnWidths;\n\n    const renderMetadataLabels = tree.state.metadata.showLabels;\n    const renderMetadataHeaders = (\n      tree.state.metadata.showHeaders &&\n      typeDef.mainAxis &&\n      (!typeDef.alignableLabels || typeDef.alignableLabels && tree.state.alignLabels)\n    );\n\n    let length = 0;\n\n    if (tree.state.renderLeafLabels) {\n      length += layout.maxLabelWidth;\n    }\n\n    for (const columnName of tree.state.metadata.columns) {\n      const columnWidth = blockPadding + Math.max(\n        (renderMetadataHeaders && renderMetadataLabels) ? headerWidths[columnName] : 0,\n        renderMetadataLabels ? (blockPadding + blockLength + columnWidths[columnName]) : blockLength\n      );\n      length += columnWidth;\n    }\n\n    let preX = 0;\n    let postX = 0;\n    let preY = 0;\n    let postY = 0;\n    switch (tree.state.type) {\n      case TreeTypes.Rectangular:\n      case TreeTypes.Diagonal:\n        preY = renderMetadataHeaders ? tree.state.stepScale : 0;\n        postX = length;\n        break;\n      case TreeTypes.Hierarchical:\n        preX = renderMetadataHeaders ? tree.state.stepScale : 0;\n        postY = length;\n        break;\n      case TreeTypes.Circular:\n      case TreeTypes.Radial:\n        preX = length;\n        preY = length;\n        postX = length;\n        postY = length;\n        break;\n    }\n\n    return ({\n      width: area.width,\n      height: area.height,\n      left: area.left + preX,\n      top: area.top + preY,\n      right: area.right - postX,\n      bottom: area.bottom - postY,\n    });\n  });\n}\n"],"sourceRoot":""}