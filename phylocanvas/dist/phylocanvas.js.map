{"version":3,"sources":["webpack://Phylocanvas/webpack/universalModuleDefinition","webpack://Phylocanvas/webpack/bootstrap","webpack://Phylocanvas/./node_modules/biojs-io-newick/src/index.js","webpack://Phylocanvas/./node_modules/biojs-io-newick/src/newick.js","webpack://Phylocanvas/./node_modules/biojs-io-newick/src/extended_newick.js","webpack://Phylocanvas/./constants.js","webpack://Phylocanvas/./defaults.js","webpack://Phylocanvas/./utils/applyPlugins.js","webpack://Phylocanvas/./utils/zoomLevelToScale.js","webpack://Phylocanvas/./utils/appendToArray.js","webpack://Phylocanvas/./types/hierarchical.js","webpack://Phylocanvas/./types/index.js","webpack://Phylocanvas/./types/radial.js","webpack://Phylocanvas/./types/rectangular.js","webpack://Phylocanvas/./types/circular.js","webpack://Phylocanvas/./types/diagonal.js","webpack://Phylocanvas/./functions/getScaleBounds.js","webpack://Phylocanvas/./functions/fitInPanel.js","webpack://Phylocanvas/./functions/collapseNode.js","webpack://Phylocanvas/./utils/mapScalar.js","webpack://Phylocanvas/./methods/drawNode.js","webpack://Phylocanvas/./methods/fitInPanel.js","webpack://Phylocanvas/./utils/getPreorderTraversal.js","webpack://Phylocanvas/./utils/getPostorderTraversal.js","webpack://Phylocanvas/./utils/parse.js","webpack://Phylocanvas/./utils/treeTraversal.js","webpack://Phylocanvas/./utils/getPixelRatio.js","webpack://Phylocanvas/./utils/rotateSubtree.js","webpack://Phylocanvas/./methods/rerootNode.js","webpack://Phylocanvas/./functions/resetBranchScale.js","webpack://Phylocanvas/./functions/resetStepScale.js","webpack://Phylocanvas/./functions/resetView.js","webpack://Phylocanvas/./functions/resetCollapsedIds.js","webpack://Phylocanvas/./functions/resize.js","webpack://Phylocanvas/./functions/rotateNode.js","webpack://Phylocanvas/./functions/resetMinScale.js","webpack://Phylocanvas/./functions/setBranchScale.js","webpack://Phylocanvas/./methods/setNodeSize.js","webpack://Phylocanvas/./functions/resetRootId.js","webpack://Phylocanvas/./functions/resetRotatedIds.js","webpack://Phylocanvas/./functions/setStepScale.js","webpack://Phylocanvas/./methods/setStyles.js","webpack://Phylocanvas/./functions/transform.js","webpack://Phylocanvas/./methods/index.js","webpack://Phylocanvas/./methods/cache.js","webpack://Phylocanvas/./methods/chain.js","webpack://Phylocanvas/./methods/changeBranchScale.js","webpack://Phylocanvas/./methods/changeScale.js","webpack://Phylocanvas/./methods/changeStepScale.js","webpack://Phylocanvas/./methods/collapseNode.js","webpack://Phylocanvas/./methods/destroy.js","webpack://Phylocanvas/./methods/drawHighlight.js","webpack://Phylocanvas/./methods/drawNodeShape.js","webpack://Phylocanvas/./methods/exportPNG.js","webpack://Phylocanvas/./methods/getBounds.js","webpack://Phylocanvas/./methods/getCentrePoint.js","webpack://Phylocanvas/./methods/getDrawingArea.js","webpack://Phylocanvas/./methods/getInitialState.js","webpack://Phylocanvas/./methods/getLabel.js","webpack://Phylocanvas/./methods/getLeafIds.js","webpack://Phylocanvas/./methods/getLeafLabels.js","webpack://Phylocanvas/./methods/getNewick.js","webpack://Phylocanvas/./methods/getNodeAtPoint.js","webpack://Phylocanvas/./methods/getNodeById.js","webpack://Phylocanvas/./methods/getNodeLabels.js","webpack://Phylocanvas/./methods/getVirtualTree.js","webpack://Phylocanvas/./methods/highlightNode.js","webpack://Phylocanvas/./methods/init.js","webpack://Phylocanvas/./methods/layout.js","webpack://Phylocanvas/./methods/measureTextWidth.js","webpack://Phylocanvas/./methods/mergeState.js","webpack://Phylocanvas/./methods/postRender.js","webpack://Phylocanvas/./methods/preRender.js","webpack://Phylocanvas/./methods/render.js","webpack://Phylocanvas/./methods/reset.js","webpack://Phylocanvas/./methods/resetCollapsedNodes.js","webpack://Phylocanvas/./methods/resize.js","webpack://Phylocanvas/./methods/resizeCanvas.js","webpack://Phylocanvas/./methods/rotateNode.js","webpack://Phylocanvas/./methods/selectLeafNodes.js","webpack://Phylocanvas/./functions/setSelectedIds.js","webpack://Phylocanvas/./methods/selectNode.js","webpack://Phylocanvas/./functions/selectLeaf.js","webpack://Phylocanvas/./functions/selectSubtree.js","webpack://Phylocanvas/./functions/deselect.js","webpack://Phylocanvas/./methods/setBranchScale.js","webpack://Phylocanvas/./methods/setFontSize.js","webpack://Phylocanvas/./methods/setRoot.js","webpack://Phylocanvas/./functions/setRoot.js","webpack://Phylocanvas/./methods/setScale.js","webpack://Phylocanvas/./methods/setSource.js","webpack://Phylocanvas/./functions/setSource.js","webpack://Phylocanvas/./methods/setState.js","webpack://Phylocanvas/./methods/setStepScale.js","webpack://Phylocanvas/./methods/setTreeType.js","webpack://Phylocanvas/./functions/setType.js","webpack://Phylocanvas/./methods/toggleAlignLeafLabels.js","webpack://Phylocanvas/./methods/toggleLeafLabels.js","webpack://Phylocanvas/./methods/transform.js","webpack://Phylocanvas/./methods/trigger.js","webpack://Phylocanvas/./utils/bindMethods.js","webpack://Phylocanvas/./utils/mapPoint.js","webpack://Phylocanvas/./utils/restoreViewport.js","webpack://Phylocanvas/./functions/restoreViewport.js","webpack://Phylocanvas/./functions/getViewport.js","webpack://Phylocanvas/./createTree.js","webpack://Phylocanvas/./utils/unmapScalar.js","webpack://Phylocanvas/./utils/index.js","webpack://Phylocanvas/./utils/unmapPoint.js","webpack://Phylocanvas/./index.js"],"names":["root","factory","exports","module","define","amd","window","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","parse_nhx","parse_newick","ancestors","tree","tokens","split","length","token","subtree","children","push","pop","x","branch_length","parseFloat","parse_json","json","nested","nest","forEach","child","subsubtree","substring","join","leaf","isNaN","duplication","gene_id","taxon_id","Angles","Degrees0","Degrees45","Math","PI","Degrees90","Degrees180","Degrees270","Degrees360","TreeTypes","Radial","Rectangular","Circular","Diagonal","Hierarchical","EmptyArray","alignLabels","branchScale","collapsedIds","fillStyle","fontFamily","fontSize","fontWeight","haloRadius","haloStyle","haloWidth","highlightedId","highlightedStyle","internalNodeStyle","shape","labelThreshold","leafNodeStyle","lineWidth","nodeSize","nodesPowRatio","padding","renderInternalLabels","renderLabels","renderLeafLabels","rootId","rotatedIds","selectableInternalNodes","selectableLeafNodes","selectedIds","showLabels","showNodes","stepScale","strokeStyle","styleLeafLabels","styleNodeLines","styles","type","zoomFactor","decorate","fnName","fn","original","this","args","plugins","plugin","Error","options","scale","levels","state","pow","log","id","append","index","indexOf","concat","nextSelectedIds","splice","rd","alignableLabels","branchScalingAxis","drawLine","layout","node","ctx","beginPath","moveTo","y","lineTo","parent","stroke","closePath","getBranchScale","totalLength","min","canvas","width","height","getTotalLength","getVirtualTree","totalLeafLength","rootNode","branchLength","getNodeAtPoint","pad","postorderTraversal","postIndex","totalNodes","slope","intercept","layoutNodes","stepOffset","isLeaf","angle","visibleLeaves","totalLeaves","isHidden","isCollapsed","preIndex","preorderTraversal","dist","cos","sin","rc","treeHeight","treeWidth","error","mainAxis","distanceFromRoot","startY","endY","stepScalingAxis","cr","pDistanceFromRoot","startAngle","endAngle","abs","arc","parentX","parentY","tan","dg","subTreeHeight","hr","startX","endX","minScale","maxScale","max","bounds","getBounds","area","getDrawingArea","maxX","minX","maxY","minY","canvasWidth","right","left","canvasHeight","bottom","top","xZoomRatio","yZoomRatio","offsetX","offsetY","undefined","types","getScaleBounds","refit","appendToArray","chain","fitInPanel","NO_STYLE","setState","getPreOrderTraversal","nodes","queue","shift","Array","isArray","unshift","getPostOrderTraversal","reverse","newickParser","require","source","sourceDef","data","trimQuotes","getPostorderTraversal","getPreorderTraversal","isCladogram","every","nodeIndex","trim","replace","longestLeaf","nodeById","leafNodes","toString","treeTraversal","getPixelRatio","backingStorePixelRatio","webkitBackingStorePixelRatio","mozBackingStorePixelRatio","msBackingStorePixelRatio","oBackingStorePixelRatio","devicePixelRatio","rotate","array","startIndex","subtrees","childNode","getSource","newRoot","chunks","defaults","resetStepScale","resetBranchScale","pixelRatio","size","point","pointX","pointY","axis","scaleRatio","offset","resetMinScale","dx","dy","dz","newScale","zoomLevelToScale","oldScale","cache","_","Map","buffer","pipeline","func","updater","assign","changeBranchScale","delta","getCentrePoint","setBranchScale","changeScale","transform","changeStepScale","setStepScale","collapseNode","nodeOrId","getNodeById","destroy","drawHighlight","actualNodeSize","actualHaloWidth","strokeWidth","actualRadius","defaultRadius","mapScalar","globalStyle","radius","floor","drawNode","translate","nodeStyle","defaultStyle","nodeRadius","renderShapes","drawNodeShape","alignLabelGap","invertedLabel","textAlign","font","fontStyle","actualFontSize","labelFillStyle","fillText","getLabel","rect","step","fill","exportPNG","toDataURL","Number","MAX_SAFE_INTEGER","MIN_SAFE_INTEGER","includeLabelAlignment","nodeStartX","nodeEndX","nodeStartY","nodeEndY","labelLength","getInitialState","defaultOptions","label","getLeafIds","virtualTree","subtreeRoot","ids","getLeafLabels","labels","getNewick","excludeCollapsed","strings","typeDef","getNodeLabels","nodeIds","t0","performance","now","parse","originalSource","t1","set","highlightNode","render","init","maxLabelWidth","maxLabel","measureTextWidth","Set","has","rotateSubtree","isInverted","text","weight","textMetrics","measureText","ceil","mergeState","postRender","restore","title","style","cursor","preRender","save","clearRect","actualMaxLabelWidth","actualHaloRadius","textBaseline","resizeCanvas","stopIndex","rerootNode","reroot","sourceNode","setSource","reset","resetView","resetCollapsedNodes","resetCollapsedIds","resize","rotateNode","selectLeafNodes","add","from","setSelectedIds","selectNode","selectLeaf","selection","selectSubtree","setFontSize","setNodeSize","setRoot","setScale","resetRootId","resetRotatedIds","setStyles","setTreeType","setType","toggleAlignLeafLabels","toggleLeafLabels","trigger","eventName","callback","apply","console","keys","methods","mapPoint","viewport","startPoint","centrePoint","endPoint","xScale","yScale","topLeftPoint","bottomRightPoint","getViewport","restoreViewport","getContext","bindMethods","applyPlugins","unmapPoint","unmapScalar","constants","createTree","utils"],"mappings":"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","file":"phylocanvas.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Phylocanvas\"] = factory();\n\telse\n\t\troot[\"Phylocanvas\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/dist/\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 3);\n","module.exports = require('./newick');\nmodule.exports.parse_nhx = require('./extended_newick');\n","/**\n * Newick format parser in JavaScript.\n *\n * Copyright (c) edited by Miguel Pignatelli 2014, based on Jason Davies 2010.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n *\n * Example tree (from http://en.wikipedia.org/wiki/Newick_format):\n *\n * +--0.1--A\n * F-----0.2-----B            +-------0.3----C\n * +------------------0.5-----E\n *                            +---------0.4------D\n *\n * Newick format:\n * (A:0.1,B:0.2,(C:0.3,D:0.4)E:0.5)F;\n *\n * Converted to JSON:\n * {\n *   name: \"F\",\n *   children: [\n *     {name: \"A\", branch_length: 0.1},\n *     {name: \"B\", branch_length: 0.2},\n *     {\n *       name: \"E\",\n *       length: 0.5,\n *       children: [\n *         {name: \"C\", branch_length: 0.3},\n *         {name: \"D\", branch_length: 0.4}\n *       ]\n *     }\n *   ]\n * }\n *\n * Converted to JSON, but with no names or lengths:\n * {\n *   children: [\n *     {}, {}, {\n *       children: [{}, {}]\n *     }\n *   ]\n * }\n */\n\n\n\nmodule.exports.parse_newick = function (s) {\n\tvar ancestors = [];\n\tvar tree = {};\n\tvar tokens = s.split(/\\s*(;|\\(|\\)|,|:)\\s*/);\n\tfor (var i=0; i<tokens.length; i++) {\n\t\tvar token = tokens[i];\n\t\tswitch (token) {\n\t\t\tcase '(': // new children\n\t\t\t\tvar subtree = {};\n\t\t\t\ttree.children = [subtree];\n\t\t\t\tancestors.push(tree);\n\t\t\t\ttree = subtree;\n\t\t\t\tbreak;\n\t\t\tcase ',': // another branch\n\t\t\t\tvar subtree = {};\n\t\t\t\tancestors[ancestors.length-1].children.push(subtree);\n\t\t\t\ttree = subtree;\n\t\t\t\tbreak;\n\t\t\tcase ')': // optional name next\n\t\t\t\ttree = ancestors.pop();\n\t\t\t\tbreak;\n\t\t\tcase ':': // optional length next\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tvar x = tokens[i-1];\n\t\t\t\tif (x == ')' || x == '(' || x == ',') {\n\t\t\t\t\ttree.name = token;\n\t\t\t\t} else if (x == ':') {\n\t\t\t\t\ttree.branch_length = parseFloat(token);\n\t\t\t\t}\n\t\t}\n\t}\n\treturn tree;\n};\n\nmodule.exports.parse_json = function (json) {\n\tfunction nested(nest){\n\t\tvar subtree = \"\";\n\n\t\tif(nest.hasOwnProperty('children')){\n\t\t\tvar children = [];\n\t\t\tnest.children.forEach(function(child){\n\t\t\t\tvar subsubtree = nested(child);\n\t\t\t\tchildren.push(subsubtree);\n\t\t\t});\n      var substring = children.join();\n      if(nest.hasOwnProperty('name')){\n        subtree = \"(\"+substring+\")\" + nest.name;\n      }\n      if(nest.hasOwnProperty('branch_length')){\n        subtree = subtree + \":\"+nest.branch_length;\n      }\n\t\t}\n\t\telse{\n      var leaf = \"\";\n      if(nest.hasOwnProperty('name')){\n        leaf = nest.name;\n      }\n      if(nest.hasOwnProperty('branch_length')){\n        leaf = leaf + \":\"+nest.branch_length;\n      }\n      subtree = subtree + leaf;\n\t\t}\n\t\treturn subtree;\n\t}\n\treturn nested(json) +\";\";\n};\n","/**\n * Extended Newick format parser in JavaScript.\n *\n * Copyright (c) Miguel Pignatelli 2014 based on Jason Davies  \n *  \n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *  \n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *  \n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n *\n * Example tree (from http://en.wikipedia.org/wiki/Newick_format):\n *\n * +--0.1--A\n * F-----0.2-----B            +-------0.3----C\n * +------------------0.5-----E\n *                            +---------0.4------D\n *\n * Newick format:\n * (A:0.1,B:0.2,(C:0.3,D:0.4)E:0.5)F;\n *\n * Converted to JSON:\n * {\n *   name: \"F\",\n *   children: [\n *     {name: \"A\", branch_length: 0.1},\n *     {name: \"B\", branch_length: 0.2},\n *     {\n *       name: \"E\",\n *       length: 0.5,\n *       children: [\n *         {name: \"C\", branch_length: 0.3},\n *         {name: \"D\", branch_length: 0.4}\n *       ]\n *     }\n *   ]\n * }\n *\n * Converted to JSON, but with no names or lengths:\n * {\n *   children: [\n *     {}, {}, {\n *       children: [{}, {}]\n *     }\n *   ]\n * }\n */\n\nmodule.exports = parse_nhx = function(s) {\n\tvar ancestors = [];\n\tvar tree = {};\n\t// var tokens = s.split(/\\s*(;|\\(|\\)|,|:)\\s*/);\n\t//[&&NHX:D=N:G=ENSG00000139618:T=9606]\n\tvar tokens = s.split( /\\s*(;|\\(|\\)|\\[|\\]|,|:|=)\\s*/ );\n\tfor (var i=0; i<tokens.length; i++) {\n\t\tvar token = tokens[i];\n\t\tswitch (token) {\n\t\t\tcase '(': // new children\n\t\t\t\tvar subtree = {};\n\t\t\t\ttree.children = [subtree];\n\t\t\t\tancestors.push(tree);\n\t\t\t\ttree = subtree;\n\t\t\t\tbreak;\n\t\t\tcase ',': // another branch\n\t\t\t\tvar subtree = {};\n\t\t\t\tancestors[ancestors.length-1].children.push(subtree);\n\t\t\t\ttree = subtree;\n\t\t\t\tbreak;\n\t\t\tcase ')': // optional name next\n\t\t\t\ttree = ancestors.pop();\n\t\t\t\tbreak;\n\t\t\tcase ':': // optional length next\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tvar x = tokens[i-1];\n\t\t\t\t// var x2 = tokens[i-2];\n\t\t\t\tif (x == ')' || x == '(' || x == ',') {\n\t\t\t\t\ttree.name = token;\n\t\t\t\t} \n\t\t\t\telse if (x == ':') {\n\t\t\t\t\tvar test_type = typeof token;\n\t\t\t\t\tif(!isNaN(token)){\n\t\t\t\t\t\ttree.branch_length = parseFloat(token);\n\t\t\t\t\t}\n\t\t\t\t\t// tree.length = parseFloat(token);\n\t\t\t\t}\n\t\t\t\telse if (x == '='){\n\t\t\t\t\tvar x2 = tokens[i-2];\n\t\t\t\t\tswitch(x2){\n\t\t\t\t\t\tcase 'D':\n\t\t\t\t\t\t\ttree.duplication = token; \n\t\t\t\t\t\t\tbreak; \n\t\t\t\t\t\tcase 'G':\n\t\t\t\t\t\t\ttree.gene_id = token;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'T':\n\t\t\t\t\t\t\ttree.taxon_id = token;\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tvar test;\n\n\t\t\t\t}\n\t\t}\n\t}\n\treturn tree;\n};\n\n","/**\n * An enumeration of certain pre-defined angles to enable faster drawing of\n * trees. There are FORTYFIVE, QUARTER, HALF and FULL. Values are all radians.\n *\n * @enum\n * @memberof Phylocanvas\n * @constant\n */\nexport const Angles = {\n  /**\n   * @constant\n   * @type double\n   * @description The equivalent of 0 degrees in Radians\n   */\n  Degrees0: 0,\n  /**\n   * @constant\n   * @type double\n   * @description The equivalent of 45 degrees in Radians\n   */\n  Degrees45: Math.PI * 0.25,\n  /**\n   * @constant\n   * @type double\n   * @description The equivalent of 90 degrees in Radians\n   */\n  Degrees90: Math.PI * 0.5,\n  /**\n   * @constant\n   * @type double\n   * @description The equivalent of 180 degrees in Radians\n   */\n  Degrees180: Math.PI,\n  /**\n   * @constant\n   * @type double\n   * @description The equivalent of 270 degrees in Radians\n   */\n  Degrees270: Math.PI * 1.5,\n  /**\n   * @constant\n   * @type double\n   * @description The equivalent of 270 degrees in Radians\n   */\n  Degrees360: Math.PI * 2,\n};\n\nexport const TreeTypes = {\n  Radial: 'rd',\n  Rectangular: 'rc',\n  Circular: 'cr',\n  Diagonal: 'dg',\n  Hierarchical: 'hr',\n};\n\nexport const EmptyArray = [];\n","import { EmptyArray, TreeTypes } from './constants';\n\nexport default {\n  alignLabels: false,\n  branchScale: null,\n  collapsedIds: EmptyArray,\n  fillStyle: '#222',\n  fontFamily: 'serif',\n  fontSize: 16,\n  fontWeight: 'normal',\n  haloRadius: 12,\n  haloStyle: '#3C7383',\n  haloWidth: 4,\n  highlightedId: null,\n  highlightedStyle: '#3C7383',\n  internalNodeStyle: { shape: 'none' },\n  labelThreshold: 8,\n  leafNodeStyle: { shape: 'circle' },\n  lineWidth: 1,\n  nodeSize: 14,\n  nodesPowRatio: 0.5,\n  padding: 32,\n  renderInternalLabels: false,\n  renderLabels: true,\n  renderLeafLabels: true,\n  rootId: null,\n  rotatedIds: EmptyArray,\n  selectableInternalNodes: true,\n  selectableLeafNodes: true,\n  selectedIds: EmptyArray,\n  showLabels: false,\n  showNodes: true,\n  stepScale: 8,\n  strokeStyle: '#222',\n  styleLeafLabels: false,\n  styleNodeLines: false,\n  styles: {},\n  type: TreeTypes.Rectangular,\n  zoomFactor: 3,\n};\n","/* eslint no-param-reassign: [\"error\", { \"props\": false }] */\n/* eslint max-params: [\"error\", 4] */\n/* eslint max-len: 0 */\n\nfunction decorate(fnName, fn) {\n  const original = this[fnName];\n  this[fnName] = function (...args) {\n    return fn.call(this, original.bind(this), args);\n  };\n}\n\nexport default function (tree, plugins) {\n  for (const plugin of plugins) {\n    if (typeof plugin !== 'function') {\n      throw new Error('Invalid plugin provided.');\n    }\n    plugin.call(tree, tree, decorate.bind(tree), plugin.options);\n  }\n}\n","export default function (tree, scale, levels) {\n  const { zoomFactor } = tree.state;\n\n  if (levels === 0) {\n    return scale;\n  }\n\n  return (\n    Math.pow(10, (Math.log(scale) / Math.log(10)) + levels * zoomFactor * 0.01)\n  );\n}\n","export default function (selectedIds, id, append = true) {\n  if (append) {\n    const index = selectedIds.indexOf(id);\n    if (index === -1) {\n      return selectedIds.concat(id);\n    }\n    const nextSelectedIds = selectedIds.concat();\n    nextSelectedIds.splice(index, 1);\n    return nextSelectedIds;\n  }\n  return [ id ];\n}\n","import { Angles } from '../constants';\n\nfunction getBranchScale(tree, stepScale = tree.state.stepScale) {\n  const layout = tree.getVirtualTree();\n\n  const treeWidth = layout.rootNode.totalLeaves * stepScale;\n  const treeHeight = (tree.ctx.canvas.height / tree.ctx.canvas.width) * treeWidth;\n\n  const totalLeafLength = layout.rootNode.totalLeafLength - layout.rootNode.branchLength;\n\n  if (totalLeafLength === 0) {\n    tree.error(501);\n  }\n\n  return treeHeight / totalLeafLength;\n}\n\nfunction layoutNodes(tree, layout) {\n  let stepOffset = 0;\n  const { rootNode } = layout;\n\n  for (let i = rootNode.postIndex - rootNode.totalNodes + 1; i <= rootNode.postIndex; i++) {\n    const node = layout.postorderTraversal[i];\n\n    // render all nodes vertically\n    node.angle = Angles.Degrees90;\n    node.y = node.distanceFromRoot * tree.state.branchScale;\n\n    if (node.isLeaf) {\n      // leaf nodes are positioned at step offsets\n      node.x = -1 * stepOffset * tree.state.stepScale;\n    } else {\n      if (node.isCollapsed) {\n        // collapsed internal nodes are positioned at the first leaf in the subtree\n        node.x = stepOffset * tree.state.stepScale;\n      } else {\n        // internal nodes are positioned half-way between first and last descendant\n        const startX = node.children[0].x;\n        const endX = node.children[node.children.length - 1].x;\n        node.x = (endX + startX) / 2;\n      }\n    }\n\n    if (node.isLeaf && !node.isHidden || node.isCollapsed && !node.isHidden) {\n      stepOffset += 1;\n    }\n  }\n}\n\nfunction drawLine(tree, layout, node) {\n  if (node === layout.rootNode) return;\n  tree.ctx.beginPath();\n  tree.ctx.moveTo(node.x, node.y);\n  tree.ctx.lineTo(node.x, node.parent.y);\n  tree.ctx.lineTo(node.parent.x, node.parent.y);\n  tree.ctx.stroke();\n  tree.ctx.closePath();\n}\n\nfunction getNodeAtPoint(tree, x, y, pad) {\n  const { rootNode, preorderTraversal } = tree.layout();\n\n  for (let i = rootNode.preIndex; i < rootNode.preIndex + rootNode.totalNodes; i++) {\n    const node = preorderTraversal[i];\n    if (!node.parent) continue;\n    if (\n      x < node.x + pad && x > node.x - pad &&\n      y < node.y + pad && y > node.parent.y - pad\n      ||\n      y < node.parent.y + pad && y > node.parent.y - pad &&\n      ((x < node.parent.x) ? (x > node.x - pad) : (x < node.x + pad))\n    ) {\n      return node;\n    }\n  }\n  return null;\n}\n\nexport default {\n  alignableLabels: true,\n  drawLine,\n  branchScalingAxis: 'y',\n  getBranchScale,\n  getNodeAtPoint,\n  mainAxis: 'y',\n  layoutNodes,\n  stepScalingAxis: 'x',\n};\n","import radial from './radial';\nimport rectangular from './rectangular';\nimport circular from './circular';\nimport diagonal from './diagonal';\nimport hierarchical from './hierarchical';\n\nexport default {\n  rd: radial,\n  rc: rectangular,\n  cr: circular,\n  dg: diagonal,\n  hr: hierarchical,\n};\n","import { Angles } from '../constants';\n\nfunction getTotalLength(tree) {\n  return Math.min(tree.ctx.canvas.width, tree.ctx.canvas.height);\n}\n\nfunction getBranchScale(tree) {\n  const totalLength = getTotalLength(tree) / 2;\n\n  const layout = tree.getVirtualTree();\n\n  const totalLeafLength = layout.rootNode.totalLeafLength - layout.rootNode.branchLength;\n\n  if (totalLeafLength > 0) {\n    return totalLength / totalLeafLength;\n  }\n\n  if (totalLeafLength < 0) {\n    return totalLength * totalLeafLength;\n  }\n\n  return 0;\n}\n\nfunction layoutNodes(tree, layout) {\n  let stepOffset = 0;\n  const { rootNode } = layout;\n\n  for (let i = rootNode.postIndex - rootNode.totalNodes + 1; i <= rootNode.postIndex; i++) {\n    const node = layout.postorderTraversal[i];\n\n    if (node.isLeaf) {\n      // leaf nodes are angled at step offsets (use a fixed step angle for all leaf nodes)\n      node.angle = stepOffset * (Angles.Degrees360 / rootNode.visibleLeaves);\n    } else {\n      let angle = 0;\n      for (const child of node.children) {\n        angle += (child.angle * child.totalLeaves);\n      }\n      node.angle = angle / node.totalLeaves;\n    }\n\n    if (node.isLeaf && !node.isHidden || node.isCollapsed && !node.isHidden) {\n      stepOffset += 1;\n    }\n  }\n\n  for (let i = rootNode.preIndex; i < rootNode.preIndex + rootNode.totalNodes; i++) {\n    const node = layout.preorderTraversal[i];\n    // calculate vector horizontal and vertical components to position the node\n    const dist = node.branchLength * tree.state.branchScale;\n    node.x = (node !== rootNode ? node.parent.x : 0) + dist * Math.cos(node.angle);\n    node.y = (node !== rootNode ? node.parent.y : 0) + dist * Math.sin(node.angle);\n\n    if (node !== rootNode) {\n      node.slope = (node.parent.y - node.y) / (node.parent.x - node.x);\n      node.intercept = node.y - node.slope * node.x;\n    }\n  }\n}\n\nfunction drawLine(tree, layout, node) {\n  tree.ctx.beginPath();\n  tree.ctx.moveTo(node.x, node.y);\n  tree.ctx.lineTo(node.parent.x, node.parent.y);\n  tree.ctx.stroke();\n  tree.ctx.closePath();\n}\n\nfunction getNodeAtPoint(tree, x, y, pad) {\n  const { rootNode, postorderTraversal } = tree.layout();\n  for (let i = rootNode.postIndex - rootNode.totalNodes + 1; i <= rootNode.postIndex; i++) {\n    const node = postorderTraversal[i];\n    if (!node.parent) continue;\n    if ((node.x > node.parent.x) ? (x < node.x && x > node.parent.x) : (x < node.parent.x && x > node.x)) {\n      if (isNaN(node.slope)) {\n        if ((node.y > node.parent.y) ? (y < node.y && y > node.parent.y) : (y < node.parent.y && y > node.y)) {\n          return node;\n        }\n      } else {\n        if ((y > node.slope * x + node.intercept - pad) &&\n            (y < node.slope * x + node.intercept + pad)) {\n          return node;\n        }\n      }\n    }\n  }\n  return null;\n}\n\nexport default {\n  alignableLabels: false,\n  branchScalingAxis: 'xy',\n  drawLine,\n  getBranchScale,\n  getNodeAtPoint,\n  layoutNodes,\n};\n","import { Angles } from '../constants';\n\nfunction getBranchScale(tree, stepScale = tree.state.stepScale) {\n  const layout = tree.getVirtualTree();\n  const treeHeight = layout.rootNode.totalLeaves * stepScale;\n  const treeWidth = (tree.ctx.canvas.width / tree.ctx.canvas.height) * treeHeight;\n\n  const totalLeafLength = layout.rootNode.totalLeafLength - layout.rootNode.branchLength;\n\n  if (totalLeafLength === 0) {\n    tree.error(501);\n  }\n\n  return treeWidth / totalLeafLength;\n}\n\nfunction layoutNodes(tree, layout) {\n  let stepOffset = 0;\n  const { rootNode } = layout;\n  for (let i = rootNode.postIndex - rootNode.totalNodes + 1; i <= rootNode.postIndex; i++) {\n    const node = layout.postorderTraversal[i];\n\n    // render nodes horizontally\n    node.angle = Angles.Degrees0;\n    node.x = node.distanceFromRoot * tree.state.branchScale;\n\n    if (node.isLeaf) {\n      // leaf nodes are positioned at step offsets\n      node.y = stepOffset * tree.state.stepScale;\n    } else {\n      if (node.isCollapsed) {\n        // collapsed internal nodes are positioned at the first leaf in the subtree\n        node.y = (stepOffset) * tree.state.stepScale;\n      } else {\n        // internal nodes are positioned half-way between first and last descendant\n        const startY = node.children[0].y;\n        const endY = node.children[node.children.length - 1].y;\n        node.y = (endY + startY) / 2;\n      }\n    }\n\n    if (node.isLeaf && !node.isHidden || node.isCollapsed && !node.isHidden) {\n      stepOffset += 1;\n    }\n  }\n}\n\nfunction drawLine(tree, layout, node) {\n  if (node === layout.rootNode) return;\n  tree.ctx.beginPath();\n  tree.ctx.moveTo(node.x, node.y);\n  tree.ctx.lineTo(node.parent.x, node.y);\n  tree.ctx.lineTo(node.parent.x, node.parent.y);\n  tree.ctx.stroke();\n  tree.ctx.closePath();\n}\n\nfunction getNodeAtPoint(tree, x, y, pad) {\n  const { rootNode, postorderTraversal } = tree.layout();\n  for (let i = rootNode.postIndex - rootNode.totalNodes + 1; i <= rootNode.postIndex; i++) {\n    const node = postorderTraversal[i];\n    if (!node.parent) continue;\n    if (\n      x < node.x + pad && x > node.parent.x - pad &&\n      y < node.y + pad && y > node.y - pad\n      ||\n      x < node.parent.x + pad && x > node.parent.x - pad &&\n      ((y < node.parent.y) ? (y > node.y - pad) : (y < node.y + pad))\n    ) {\n      return node;\n    }\n  }\n  return null;\n}\n\nexport default {\n  alignableLabels: true,\n  branchScalingAxis: 'x',\n  drawLine,\n  getBranchScale,\n  getNodeAtPoint,\n  mainAxis: 'x',\n  layoutNodes,\n  stepScalingAxis: 'y',\n};\n","import { Angles } from '../constants';\n\nfunction getTotalLength(tree) {\n  return Math.min(tree.ctx.canvas.width, tree.ctx.canvas.height);\n}\n\nfunction getBranchScale(tree) {\n  const totalLength = getTotalLength(tree) / 2;\n\n  const { rootNode } = tree.getVirtualTree();\n\n  if (rootNode.totalLeafLength > 0) {\n    return totalLength / rootNode.totalLeafLength;\n  }\n\n  if (rootNode.totalLeafLength < 0) {\n    return totalLength * rootNode.totalLeafLength;\n  }\n\n  return 0;\n}\n\nfunction layoutNodes(tree, layout) {\n  let stepOffset = 0;\n\n  const { rootNode } = layout;\n  for (let i = rootNode.postIndex - rootNode.totalNodes + 1; i <= rootNode.postIndex; i++) {\n    const node = layout.postorderTraversal[i];\n\n    if (node.isLeaf) {\n      // leaf nodes are angled at step offsets (use a fixed step angle for all leaf nodes)\n      node.angle = stepOffset * (Angles.Degrees360 / layout.rootNode.visibleLeaves);\n    } else {\n      // internal nodes are angled half-way between first and last descendant\n      const startAngle = node.children[0].angle;\n      const endAngle = node.children[node.children.length - 1].angle;\n      node.angle = (endAngle + startAngle) / 2;\n    }\n\n    // calculate vector horizontal and vertical components to position the node\n    const distanceFromRoot = node.distanceFromRoot - layout.rootNode.distanceFromRoot;\n    const dist = distanceFromRoot * tree.state.branchScale;\n    node.x = dist * Math.cos(node.angle);\n    node.y = dist * Math.sin(node.angle);\n\n    if (node.isLeaf && !node.isHidden || node.isCollapsed && !node.isHidden) {\n      stepOffset += 1;\n    }\n\n    if (node.parent) {\n      node.slope = Math.tan(node.angle); // (node.parent.y - node.y) / (node.parent.x - node.x);\n      node.intercept = node.y - node.slope * node.x;\n    }\n  }\n}\n\nfunction drawLine(tree, layout, node) {\n  const { rootNode } = layout;\n\n  const pDistanceFromRoot = node.parent.distanceFromRoot - rootNode.distanceFromRoot;\n  tree.ctx.beginPath();\n  tree.ctx.moveTo(node.x, node.y);\n  tree.ctx.lineTo(\n    pDistanceFromRoot * tree.state.branchScale * Math.cos(node.angle),\n    pDistanceFromRoot * tree.state.branchScale * Math.sin(node.angle)\n  );\n  tree.ctx.stroke();\n  tree.ctx.closePath();\n\n  if (node.children && node.children.length && !node.isCollapsed) {\n    const startAngle = node.children[0].angle;\n    const endAngle = node.children[node.children.length - 1].angle;\n    const distanceFromRoot = Math.abs(node.distanceFromRoot - rootNode.distanceFromRoot);\n    tree.ctx.beginPath();\n    tree.ctx.arc(0, 0,\n      distanceFromRoot * tree.state.branchScale,\n      startAngle, endAngle,\n      endAngle < startAngle\n    );\n    tree.ctx.stroke();\n    tree.ctx.closePath();\n  }\n}\n\nfunction getNodeAtPoint(tree, x, y, pad) {\n  const { rootNode, postorderTraversal } = tree.layout();\n  for (let i = rootNode.postIndex - rootNode.totalNodes + 1; i <= rootNode.postIndex; i++) {\n    const node = postorderTraversal[i];\n    if (!node.parent) continue;\n    const distanceFromRoot = node.parent.distanceFromRoot - rootNode.distanceFromRoot;\n    const parentX = distanceFromRoot * tree.state.branchScale * Math.cos(node.angle);\n    if ((node.x > parentX) ? (x < node.x && x > parentX) : (x < parentX && x > node.x)) {\n      if (isNaN(node.slope)) {\n        const parentY = distanceFromRoot * tree.state.branchScale * Math.sin(node.angle);\n        if ((node.y > parentY) ? (y < node.y && y > parentY) : (y < parentY && y > node.y)) {\n          return node;\n        }\n      } else {\n        if ((y > node.slope * x + node.intercept - pad) &&\n            (y < node.slope * x + node.intercept + pad)) {\n          return node;\n        }\n      }\n    }\n  }\n  return null;\n}\n\nexport default {\n  alignableLabels: true,\n  branchScalingAxis: 'xy',\n  drawLine,\n  getBranchScale,\n  getNodeAtPoint,\n  layoutNodes,\n};\n","import { Angles } from '../constants';\n\nexport function getBranchScale(tree) {\n  const { rootNode } = tree.getVirtualTree();\n\n  const totalLength = (tree.ctx.canvas.width - tree.state.padding * 2);\n\n  if (rootNode.totalLeafLength > 0) {\n    return totalLength / rootNode.totalLeafLength;\n  }\n\n  if (rootNode.totalLeafLength < 0) {\n    return totalLength * rootNode.totalLeafLength;\n  }\n\n  return 0;\n}\n\nfunction layoutNodes(tree, layout) {\n  let stepOffset = 0;\n\n  const { rootNode } = layout;\n  for (let i = rootNode.postIndex - rootNode.totalNodes + 1; i <= rootNode.postIndex; i++) {\n    const node = layout.postorderTraversal[i];\n\n    // render all nodes horizontally\n    node.angle = Angles.Degrees0;\n\n    // use subtree size to postion the current node away from tree root\n    node.x = (layout.rootNode.visibleLeaves - node.visibleLeaves) * tree.state.stepScale / 2;\n\n    if (node.isLeaf) {\n      // leaf nodes are positioned at step offsets\n      node.y = stepOffset * tree.state.stepScale;\n    } else {\n      if (node.isCollapsed) {\n        // collapsed internal nodes are positioned at the first leaf in the subtree\n        node.y = stepOffset * tree.state.stepScale;\n      } else {\n        // internal nodes are positioned in the middle point of the substree\n        const startY = node.children[0].y;\n        const subTreeHeight = (node.visibleLeaves - node.children[0].visibleLeaves) * tree.state.stepScale;\n        node.y = startY + (subTreeHeight / 2);\n      }\n    }\n    if (node.isLeaf) {\n      stepOffset++;\n    }\n  }\n\n  for (let i = rootNode.preIndex; i < rootNode.preIndex + rootNode.totalNodes; i++) {\n    const node = layout.preorderTraversal[i];\n    if (node.parent) {\n      node.slope = (node.parent.y - node.y) / (node.parent.x - node.x);\n      node.intercept = node.y - node.slope * node.x;\n    }\n  }\n}\n\nfunction drawLine(tree, layout, node) {\n  if (node === layout.rootNode) return;\n  tree.ctx.beginPath();\n  tree.ctx.moveTo(node.x, node.y);\n  tree.ctx.lineTo(node.parent.x, node.parent.y);\n  tree.ctx.stroke();\n  tree.ctx.closePath();\n}\n\nfunction getNodeAtPoint(tree, x, y, pad) {\n  const { rootNode, postorderTraversal } = tree.getVirtualTree();\n  for (let i = rootNode.postIndex - rootNode.totalNodes + 1; i <= rootNode.postIndex; i++) {\n    const node = postorderTraversal[i];\n    if (node && node.parent && x < node.x && x > node.parent.x) {\n      if ((y > node.slope * x + node.intercept - pad) &&\n          (y < node.slope * x + node.intercept + pad)) {\n        return node;\n      }\n    }\n  }\n  return null;\n}\n\nexport default {\n  alignableLabels: false,\n  getBranchScale,\n  getNodeAtPoint,\n  drawLine,\n  layoutNodes,\n  mainAxis: 'x',\n  stepScalingAxis: 'y',\n};\n","export default function (scale) {\n  return {\n    minScale: scale / 2,\n    maxScale: Math.max(scale, 16),\n  };\n}\n","import types from '../types';\nimport getScaleBounds from './getScaleBounds';\n\nexport default function (tree) {\n  const bounds = tree.getBounds(false);\n  const area = tree.getDrawingArea();\n\n  const treeWidth = bounds.maxX - bounds.minX;\n  const treeHeight = bounds.maxY - bounds.minY;\n  const canvasWidth = Math.max(\n    area.width * 0.333,\n    area.right - area.left - tree.state.nodeSize\n  );\n  const canvasHeight = Math.max(\n    area.height * 0.333,\n    area.bottom - area.top - tree.state.nodeSize\n  );\n  const xZoomRatio = canvasWidth / treeWidth;\n  const yZoomRatio = canvasHeight / treeHeight;\n  const scale = Math.min(xZoomRatio, yZoomRatio);\n\n  const pad =\n    tree.state.padding + Math.max(tree.state.nodeSize, tree.state.fontSize) / 2;\n  let offsetX = -1 * bounds.minX * scale;\n  let offsetY = -1 * bounds.minY * scale;\n\n  if (xZoomRatio > yZoomRatio) {\n    offsetX += pad + (canvasWidth - treeWidth * scale) / 2;\n    offsetY += pad;\n  } else if (xZoomRatio < yZoomRatio) {\n    offsetX += pad;\n    offsetY += pad + (canvasHeight - treeHeight * scale) / 2;\n  } else {\n    offsetX += pad;\n    offsetY += pad;\n  }\n\n  const typeDef = types[tree.state.type];\n  if (typeDef.mainAxis === undefined) {\n    offsetX += (area.width - canvasWidth) / 2 - pad;\n    offsetY += (area.height - canvasHeight) / 2 - pad;\n  }\n\n  // not using spread for \"yarn link\" compatibility\n  const { minScale, maxScale } = getScaleBounds(scale);\n  return {\n    offsetX,\n    offsetY,\n    scale,\n    minScale,\n    maxScale,\n  };\n}\n","import appendToArray from '../utils/appendToArray';\nimport fitInPanel from './fitInPanel';\n\nexport default function (tree, id, refit) {\n  const collapsedIds = appendToArray(tree.state.collapsedIds, id);\n  return tree.chain(\n    () => ({ collapsedIds }),\n    refit ? fitInPanel : null\n  );\n}\n","/**\n * Maps a scalar value on the canvas plane to a scalar value on the tree plane.\n *\n * @param {Object} tree - a tree instance\n * @param {Number} value - the value to be mapped.\n *\n * @example <caption>Example usage of mapScalar with a tree scale equals 2.</caption>\n * // returns 5\n * mapScalar(tree, 10);\n *\n * @returns {Number} Mapped value\n */\nexport default function (tree, value) {\n  return (value / tree.state.scale);\n}\n","import types from '../types';\nimport { Angles } from '../constants';\nconst NO_STYLE = {};\n\nexport default function (tree, layout, node) {\n  const { ctx, state } = tree;\n\n  // if (node.isCollapsed) {\n  //   // TODO: Draw collapsed node\n  // }\n\n  ctx.translate(node.x, node.y);\n  ctx.rotate(node.angle);\n\n  const nodeStyle = (state.styles ? state.styles[node.id] : undefined) || NO_STYLE;\n  const defaultStyle = node.isLeaf ? state.leafNodeStyle : state.internalNodeStyle;\n\n  ctx.fillStyle = nodeStyle.fillStyle || state.fillStyle || defaultStyle.fillStyle;\n  ctx.strokeStyle = tree.state.strokeStyle;\n\n  const nodeSize = tree._.actualNodeSize;\n  const nodeRadius = tree._.actualNodeSize / 2;\n\n  if (tree._.renderShapes) {\n    const shape = (nodeStyle ? nodeStyle.shape : undefined) || defaultStyle.shape;\n    tree.drawNodeShape(node, shape, nodeSize);\n  }\n\n  if (tree.state.showLabels || tree._.renderLabels) {\n    if ((node.isLeaf && state.renderLeafLabels) || (!node.isLeaf && state.renderInternalLabels)) {\n      const alignLabelGap =\n        (node.isLeaf && state.alignLabels && types[state.type].alignableLabels !== false) ?\n          state.branchScale * (layout.rootNode.longestLeaf - node.distanceFromRoot) :\n          0;\n      if (alignLabelGap > 0 && tree.state.lineWidth * tree.state.scale > 1) {\n        const lineWidth = tree.ctx.lineWidth;\n        tree.ctx.lineWidth = tree.ctx.lineWidth / 4;\n        tree.ctx.strokeWidth = tree.ctx.lineWidth;\n        ctx.beginPath();\n        ctx.moveTo(nodeRadius, 0);\n        ctx.lineTo(nodeRadius + alignLabelGap, 0);\n        ctx.stroke();\n        ctx.closePath();\n        tree.ctx.lineWidth = lineWidth;\n        tree.ctx.strokeWidth = tree.ctx.lineWidth;\n      }\n      const offset = (node.isLeaf ? 2 : 0) * nodeRadius + alignLabelGap;\n\n      const invertedLabel = (node.angle > Angles.Degrees90) && (node.angle < Angles.Degrees270);\n      if (invertedLabel) {\n        ctx.rotate(Angles.Degrees180);\n      }\n      ctx.textAlign = invertedLabel ? 'right' : 'left';\n\n      const font = ctx.font;\n      if (nodeStyle.fontStyle) {\n        ctx.font = `${nodeStyle.fontStyle} ${tree._.actualFontSize}px ${tree.state.fontFamily}`;\n      }\n      if (state.styleLeafLabels === false) {\n        ctx.fillStyle = nodeStyle.labelFillStyle || state.fillStyle || defaultStyle.fillStyle;\n      }\n      ctx.fillText(\n        tree.getLabel(node),\n        invertedLabel ? -offset : offset,\n        0\n      );\n      ctx.font = font;\n\n      if (invertedLabel) {\n        ctx.rotate(-Angles.Degrees180);\n      }\n    }\n  }\n\n  ctx.rotate(-node.angle);\n  ctx.translate(-node.x, -node.y);\n}\n","import fitInPanel from '../functions/fitInPanel';\n\nexport default function (tree) {\n  tree.setState(\n    fitInPanel(tree)\n  );\n}\n","// https://en.wikipedia.org/wiki/Tree_traversal#Pre-order\nexport default function getPreOrderTraversal(rootNode) {\n  const nodes = [];\n  const queue = [ rootNode ];\n\n  while (queue.length) {\n    const node = queue.shift();\n    nodes.push(node);\n    if (Array.isArray(node.children)) {\n      queue.unshift(...node.children);\n    }\n  }\n\n  return nodes;\n}\n","// https://en.wikipedia.org/wiki/Tree_traversal#Post-order\nexport default function getPostOrderTraversal(rootNode) {\n  const nodes = [];\n  const queue = [ rootNode ];\n\n  while (queue.length) {\n    const node = queue.pop();\n    if (Array.isArray(node.children)) {\n      queue.push(...node.children);\n    }\n    nodes.push(node);\n  }\n\n  return nodes.reverse();\n}\n","const newickParser = require('biojs-io-newick');\n\nimport treeTraversal from './treeTraversal';\n\nexport default function (source) {\n  let sourceDef = source;\n  if (typeof source === 'string') {\n    sourceDef = { type: 'newick', data: source };\n  }\n\n  const { type, data, ...options } = sourceDef;\n  let rootNode = null;\n  if (type === 'newick' || type === undefined) {\n    rootNode = newickParser.parse_newick(data);\n  } else if (type === 'biojs') {\n    rootNode = data;\n  } else {\n    throw new Error(`Source type is not supported: ${type}`);\n  }\n\n  return treeTraversal(rootNode, options);\n}\n","import getPreorderTraversal from './getPreorderTraversal';\nimport getPostorderTraversal from './getPostorderTraversal';\n\nexport default function (rootNode, { trimQuotes = true } = {}) {\n  const postorderTraversal = getPostorderTraversal(rootNode);\n  const preorderTraversal = getPreorderTraversal(rootNode);\n\n  // Detect cladograms\n  const isCladogram = postorderTraversal.every((x) => (x.branchLength || x.branch_length || 0) === 0);\n  if (isCladogram) {\n    rootNode.branchLength = 0;\n    for (let nodeIndex = 0; nodeIndex < preorderTraversal.length; nodeIndex++) {\n      const node = preorderTraversal[nodeIndex];\n      if (node.children) {\n        for (const child of node.children) {\n          child.branchLength = node.branchLength + 1;\n        }\n      }\n    }\n  }\n\n  // bottom-up traversal starting from leaves to root\n  for (let nodeIndex = 0; nodeIndex < postorderTraversal.length; nodeIndex++) {\n    const node = postorderTraversal[nodeIndex];\n    node.postIndex = nodeIndex; // the zero-based index of the node in POst Order Traversal array\n    node.isLeaf = !Array.isArray(node.children);\n    node.branchLength = Math.abs(node.branchLength || node.branch_length || 0);\n    delete node.branch_length;\n    if (node.isLeaf && typeof node.name === 'string') {\n      if (trimQuotes) {\n        node.id = node.name.trim().replace(/^['\"]|['\"]$/g, '');\n      } else {\n        node.id = node.name;\n      }\n      delete node.name;\n    }\n    node.totalNodes = 1;\n    node.totalLeaves = 1;\n    node.totalLeafLength = node.branchLength;\n    if (!node.isLeaf) {\n      node.totalNodes = 1;\n      node.totalLeaves = 0;\n      let longestLeaf = 0;\n      for (const child of node.children) {\n        node.totalNodes += child.totalNodes;\n        node.totalLeaves += child.totalLeaves;\n        if (child.totalLeafLength > longestLeaf) {\n          longestLeaf = child.totalLeafLength;\n        }\n        child.parent = node;\n      }\n      node.totalLeafLength = node.branchLength + longestLeaf;\n      node.longestLeaf = longestLeaf;\n    }\n  }\n\n  const nodeById = {};\n  const leafNodes = [];\n  // top-down traversal starting from root to leaves\n  for (let nodeIndex = 0; nodeIndex < preorderTraversal.length; nodeIndex++) {\n    const node = preorderTraversal[nodeIndex];\n    node.preIndex = nodeIndex; // the zero-based index of the node in PRe Order Traversal array\n    if (!node.id) {\n      node.id = nodeIndex.toString();\n    }\n    nodeById[node.id] = node;\n    node.distanceFromRoot = (node.parent ? node.parent.distanceFromRoot : 0) + node.branchLength;\n    if (node.isLeaf) {\n      leafNodes.push(node);\n    }\n    node.visibleLeaves = node.totalLeaves;\n  }\n\n\n  return {\n    nodeById,\n    rootNode,\n    leafNodes,\n    postorderTraversal,\n    preorderTraversal,\n  };\n}\n","export default function getPixelRatio(ctx) {\n  const backingStorePixelRatio = (\n    ctx.backingStorePixelRatio ||\n    ctx.webkitBackingStorePixelRatio ||\n    ctx.mozBackingStorePixelRatio ||\n    ctx.msBackingStorePixelRatio ||\n    ctx.oBackingStorePixelRatio ||\n    1\n  );\n  return (window.devicePixelRatio || 1) / backingStorePixelRatio;\n}\n","function rotate(array, startIndex, node) {\n  const subtrees = [];\n  for (const childNode of node.children) {\n    const subtree = array.splice(startIndex, childNode.totalNodes);\n    subtrees.push(subtree);\n  }\n  for (const subtree of subtrees) {\n    array.splice(startIndex, 0, ...subtree);\n  }\n}\n\nexport default function (tree, layout, node) {\n  const { preorderTraversal, postorderTraversal } = layout;\n\n  rotate(preorderTraversal, preorderTraversal.indexOf(node) + 1, node);\n  for (let i = 0; i < preorderTraversal.length; i++) {\n    preorderTraversal[i].preIndex = i;\n  }\n\n  rotate(postorderTraversal, postorderTraversal.indexOf(node) - node.totalNodes + 1, node);\n  for (let i = 0; i < postorderTraversal.length; i++) {\n    postorderTraversal[i].postIndex = i;\n  }\n\n  node.children.reverse();\n}\n","import getPostorderTraversal from '../utils/getPostorderTraversal';\n\nfunction reroot(tree, layout, parent, sourceNode) {\n  const newRoot = {\n    branchLength: sourceNode.branchLength,\n    children: [],\n    parent,\n  };\n  parent.children.push(newRoot);\n\n  for (const child of sourceNode.parent.children) {\n    if (child !== sourceNode) {\n      newRoot.children.push(child);\n    }\n  }\n\n  if (sourceNode.parent.parent && sourceNode.parent !== layout.rootNode) {\n    reroot(tree, layout, newRoot, sourceNode.parent);\n  }\n}\n\nfunction getSource(newRoot) {\n  const postorderTraversal = getPostorderTraversal(newRoot);\n  const subtrees = [];\n  for (const node of postorderTraversal) {\n    if (node.isLeaf) {\n      subtrees.push(`${node.id}:${node.branchLength}`);\n    } else if (node !== newRoot) {\n      const chunks = subtrees.splice(subtrees.length - node.children.length, node.children.length);\n      subtrees.push(`(${chunks.join(',')}):${node.branchLength}`);\n    }\n  }\n\n  return `(${subtrees.join(',')});`;\n}\n\nexport default function (tree, nodeOrId) {\n  const node = tree.getNodeById(nodeOrId);\n  const layout = tree.layout();\n\n  if (node.parent) {\n    const newRoot = {\n      branchLength: 0,\n      children: [],\n    };\n\n    reroot(tree, layout, newRoot, node);\n    newRoot.children.push(node);\n\n    const source = {\n      type: 'newick',\n      original: tree.state.source,\n      data: getSource(newRoot),\n    };\n\n    tree.setSource(source);\n  }\n}\n","import types from '../types';\nimport defaults from '../defaults';\n\nexport default function (tree) {\n  return {\n    branchScale: types[tree.state.type].getBranchScale(tree, defaults.stepScale),\n  };\n}\n","import defaults from '../defaults';\n\nexport default function (tree) {\n  // reset tree step scale to default value\n  return {\n    stepScale: defaults.stepScale,\n  };\n}\n","import fitInPanel from './fitInPanel';\nimport resetBranchScale from './resetBranchScale';\nimport resetStepScale from './resetStepScale';\n\nexport default function (tree) {\n  return tree.chain(\n    resetStepScale,\n    resetBranchScale,\n    fitInPanel\n  );\n}\n\n","import { EmptyArray } from '../constants';\n\nexport default function (tree) {\n  return {\n    collapsedIds: EmptyArray,\n  };\n}\n","import getPixelRatio from '../utils/getPixelRatio';\n\nexport default function (tree, width, height) {\n  tree.pixelRatio = getPixelRatio(tree.ctx);\n  return { size: { width, height } };\n}\n","import appendToArray from '../utils/appendToArray';\nimport fitInPanel from './fitInPanel';\n\nexport default function (tree, id, refit) {\n  const rotatedIds = appendToArray(tree.state.rotatedIds, id);\n  return tree.chain(\n    () => ({ rotatedIds }),\n    refit ? fitInPanel : null\n  );\n}\n","import fitInPanel from './fitInPanel';\n\nexport default function (tree) {\n  const { minScale } = fitInPanel(tree);\n  return { minScale };\n}\n","import types from '../types';\nimport resetMinScale from './resetMinScale';\n\nexport default function (tree, branchScale, point) {\n  const pointX = point.x;\n  const pointY = point.y;\n  let offsetX = tree.state.offsetX;\n  let offsetY = tree.state.offsetY;\n\n  if (point) {\n    const axis = types[tree.state.type].branchScalingAxis;\n    const scaleRatio = branchScale / tree.state.branchScale;\n\n    if (axis === 'x' || axis === 'xy') {\n      const offset = tree.state.offsetX;\n      offsetX = offset + ((pointX) - ((pointX - offset) * scaleRatio + offset));\n    }\n\n    if (axis === 'y' || axis === 'xy') {\n      const offset = tree.state.offsetY;\n      offsetY = offset + ((pointY) - ((pointY - offset) * scaleRatio + offset));\n    }\n  }\n\n  return tree.chain(\n    () => ({ branchScale, offsetX, offsetY }),\n    resetMinScale\n  );\n}\n","export default function (tree, nodeSize) {\n  if (typeof(nodeSize) === 'number') {\n    tree.setState({ nodeSize });\n  } else {\n    tree.error('Invalid node size value, expected number, got ', typeof(nodeSize));\n  }\n}\n","import defaults from '../defaults';\n\nexport default function (tree) {\n  return {\n    rootId: defaults.rootId,\n  };\n}\n","import { EmptyArray } from '../constants';\n\nexport default function (tree) {\n  return {\n    rotatedIds: EmptyArray,\n  };\n}\n","import types from '../types';\nimport resetMinScale from './resetMinScale';\n\nexport default function (tree, stepScale, point) {\n  const pointX = point.x;\n  const pointY = point.y;\n  let offsetX = tree.state.offsetX;\n  let offsetY = tree.state.offsetY;\n  const scaleRatio = stepScale / tree.state.stepScale;\n\n  if (point) {\n    const axis = types[tree.state.type].stepScalingAxis;\n\n    if (axis === 'x' || axis === 'xy') {\n      const offset = tree.state.offsetX;\n      offsetX = offset + ((pointX) - ((pointX - offset) * scaleRatio + offset));\n    }\n\n    if (axis === 'y' || axis === 'xy') {\n      const offset = tree.state.offsetY;\n      offsetY = offset + ((pointY) - ((pointY - offset) * scaleRatio + offset));\n    }\n  }\n\n  return tree.chain(\n    () => ({ stepScale, offsetX, offsetY }),\n    resetMinScale\n  );\n}\n","export default function (tree, styles) {\n  if (typeof(styles) === 'object') {\n    tree.setState({ styles });\n  } else {\n    tree.error('Invalid node styles, expected object, got ', typeof(styles));\n  }\n}\n","/* eslint no-else-return:0 */\nimport zoomLevelToScale from '../utils/zoomLevelToScale';\n\nexport default function (tree, dx = 0, dy = 0, dz = 0, point) {\n  const x = point.x;\n  const y = point.y;\n  const offsetX = tree.state.offsetX + dx;\n  const offsetY = tree.state.offsetY + dy;\n  if (dz === 0) {\n    return {\n      offsetX,\n      offsetY,\n    };\n  } else {\n    const newScale = zoomLevelToScale(tree, tree.state.scale, dz);\n    const oldScale = tree.state.scale;\n    return {\n      offsetX: -1 * ((((-1 * offsetX) + x) / oldScale * newScale) - x),\n      offsetY: -1 * ((((-1 * offsetY) + y) / oldScale * newScale) - y),\n      scale: newScale,\n    };\n  }\n}\n","import cache from './cache';\nimport chain from './chain';\nimport changeBranchScale from './changeBranchScale';\nimport changeScale from './changeScale';\nimport changeStepScale from './changeStepScale';\nimport collapseNode from './collapseNode';\nimport destroy from './destroy';\nimport drawHighlight from './drawHighlight';\nimport drawNode from './drawNode';\nimport drawNodeShape from './drawNodeShape';\nimport exportPNG from './exportPNG';\nimport fitInPanel from './fitInPanel';\nimport getBounds from './getBounds';\nimport getCentrePoint from './getCentrePoint';\nimport getDrawingArea from './getDrawingArea';\nimport getInitialState from './getInitialState';\nimport getLabel from './getLabel';\nimport getLeafIds from './getLeafIds';\nimport getLeafLabels from './getLeafLabels';\nimport getNewick from './getNewick';\nimport getNodeAtPoint from './getNodeAtPoint';\nimport getNodeById from './getNodeById';\nimport getNodeLabels from './getNodeLabels';\nimport getVirtualTree from './getVirtualTree';\nimport highlightNode from './highlightNode';\nimport init from './init';\nimport layout from './layout';\nimport measureTextWidth from './measureTextWidth';\nimport mergeState from './mergeState';\nimport postRender from './postRender';\nimport preRender from './preRender';\nimport render from './render';\nimport rerootNode from './rerootNode';\nimport reset from './reset';\nimport resetCollapsedNodes from './resetCollapsedNodes';\nimport resize from './resize';\nimport resizeCanvas from './resizeCanvas';\nimport rotateNode from './rotateNode';\nimport selectLeafNodes from './selectLeafNodes';\nimport selectNode from './selectNode';\nimport setBranchScale from './setBranchScale';\nimport setFontSize from './setFontSize';\nimport setNodeSize from './setNodeSize';\nimport setRoot from './setRoot';\nimport setScale from './setScale';\nimport setSource from './setSource';\nimport setState from './setState';\nimport setStepScale from './setStepScale';\nimport setStyles from './setStyles';\nimport setTreeType from './setTreeType';\nimport toggleAlignLeafLabels from './toggleAlignLeafLabels';\nimport toggleLeafLabels from './toggleLeafLabels';\nimport transform from './transform';\nimport trigger from './trigger';\n\nexport default {\n  cache,\n  chain,\n  changeBranchScale,\n  changeScale,\n  changeStepScale,\n  collapseNode,\n  destroy,\n  drawHighlight,\n  drawNode,\n  drawNodeShape,\n  exportPNG,\n  fitInPanel,\n  getBounds,\n  getCentrePoint,\n  getDrawingArea,\n  getInitialState,\n  getLabel,\n  getLeafIds,\n  getLeafLabels,\n  getNewick,\n  getNodeAtPoint,\n  getNodeById,\n  getNodeLabels,\n  getVirtualTree,\n  highlightNode,\n  init,\n  layout,\n  measureTextWidth,\n  mergeState,\n  postRender,\n  preRender,\n  render,\n  rerootNode,\n  reset,\n  resetCollapsedNodes,\n  resize,\n  resizeCanvas,\n  rotateNode,\n  selectLeafNodes,\n  selectNode,\n  setBranchScale,\n  setFontSize,\n  setNodeSize,\n  setRoot,\n  setScale,\n  setSource,\n  setState,\n  setStepScale,\n  setStyles,\n  setTreeType,\n  toggleAlignLeafLabels,\n  toggleLeafLabels,\n  transform,\n  trigger,\n};\n","export default function (tree, name) {\n  return (\n    tree._.cache[name] || (tree._.cache[name] = new Map())\n  );\n}\n","export default function (tree, ...pipeline) {\n  const buffer = {};\n\n  for (const func of pipeline) {\n    if (typeof(func) === 'function') {\n      const updater = func(tree);\n      Object.assign(buffer, updater);\n      Object.assign(tree.state, updater);\n    }\n  }\n\n  return buffer;\n}\n","import zoomLevelToScale from '../utils/zoomLevelToScale';\n\nexport default function (tree, delta, point = tree.getCentrePoint()) {\n  tree.setBranchScale(\n    zoomLevelToScale(tree, tree.state.branchScale, delta),\n    point\n  );\n}\n","export default function (tree, dz = 0, point = tree.getCentrePoint()) {\n  tree.transform(0, 0, dz, point);\n}\n","import zoomLevelToScale from '../utils/zoomLevelToScale';\n\nexport default function (tree, delta, point = tree.getCentrePoint()) {\n  tree.setStepScale(\n    zoomLevelToScale(tree, tree.state.stepScale, delta),\n    point\n  );\n}\n","import collapseNode from '../functions/collapseNode';\n\nexport default function (tree, nodeOrId, { refit = false } = {}) {\n  const node = tree.getNodeById(nodeOrId);\n  if (node) {\n    tree.setState(\n      collapseNode(tree, node.id, refit)\n    );\n  }\n}\n","export default function (tree) {\n}\n","import { Angles } from '../constants';\n\nimport mapScalar from '../utils/mapScalar';\nimport defaults from '../defaults';\n\nexport default function (tree, node) {\n  const { ctx, state } = tree;\n\n  const { actualNodeSize, actualHaloWidth } = tree._;\n  ctx.lineWidth = actualHaloWidth;\n  ctx.strokeWidth = actualHaloWidth;\n  ctx.strokeStyle = state.haloStyle;\n\n  const actualRadius = actualNodeSize / 2;\n  const defaultRadius = mapScalar(tree, defaults.nodeSize / 2);\n\n  const globalStyle = node.isLeaf ? state.leafNodeStyle : state.internalNodeStyle;\n  const { shape = globalStyle.shape } = state.styles[node.id] || globalStyle;\n\n  const radius = shape === 'none' ?\n    actualHaloWidth * 1.5 :\n    actualRadius + defaultRadius + Math.floor((actualRadius / defaultRadius) / 2);\n\n  ctx.beginPath();\n  ctx.arc(node.x, node.y, radius, 0, Angles.Degrees360, false);\n  ctx.closePath();\n  ctx.stroke();\n}\n","import { Angles } from '../constants';\n\n// node included for context e.g. pie chart slices\nexport default function (tree, node, shape, size, radius = size / 2) {\n  const { ctx } = tree;\n  ctx.beginPath();\n  if (shape === 'dot') {\n    ctx.arc(0, 0, ctx.lineWidth * 2, Angles.Degrees0, Angles.Degrees360);\n  } else if (shape === 'circle') {\n    ctx.arc(0, 0, radius, Angles.Degrees0, Angles.Degrees360);\n  } else if (shape === 'square') {\n    ctx.rect(-radius, -radius, size, size);\n  } else if (shape === 'triangle') {\n    ctx.moveTo(0, -radius);\n    ctx.lineTo(radius, radius);\n    ctx.lineTo(-radius, radius);\n    ctx.lineTo(0, -radius);\n  } else if (shape === 'star') {\n    const step = Math.PI / 5;\n    let angle = Math.PI / 2 * 3;\n    ctx.moveTo(0, -radius);\n    for (let i = 0; i < 5; i++) {\n      ctx.lineTo(Math.cos(angle) * radius, Math.sin(angle) * radius);\n      angle += step;\n      ctx.lineTo(Math.cos(angle) * radius * 0.5, Math.sin(angle) * radius * 0.5);\n      angle += step;\n    }\n    ctx.lineTo(0, -radius);\n  }\n  ctx.fill();\n  ctx.stroke();\n  ctx.closePath();\n}\n","export default function (tree) {\n  return tree.ctx.canvas.toDataURL();\n}\n","import { TreeTypes } from '../constants';\n\nexport default function (tree) {\n  const { state } = tree;\n\n  const layout = tree.layout();\n\n  let minX = Number.MAX_SAFE_INTEGER;\n  let minY = Number.MAX_SAFE_INTEGER;\n  let maxX = Number.MIN_SAFE_INTEGER;\n  let maxY = Number.MIN_SAFE_INTEGER;\n\n  const includeLabelAlignment = (state.type === TreeTypes.Circular && state.alignLabels);\n\n  const nodePadding = 0;\n\n  const { rootNode } = layout;\n  for (let i = rootNode.preIndex; i < rootNode.preIndex + rootNode.totalNodes; i++) {\n    const node = layout.preorderTraversal[i];\n\n    const nodeStartX = node.x;\n    let nodeEndX = node.x;\n    const nodeStartY = node.y;\n    let nodeEndY = node.y;\n\n    if (node.isLeaf) {\n      let labelLength = nodePadding;\n      if (includeLabelAlignment) {\n        labelLength += state.branchScale * (layout.rootNode.totalLeafLength - node.distanceFromRoot);\n      }\n      nodeEndX += (labelLength * Math.cos(node.angle));\n      nodeEndY += (labelLength * Math.sin(node.angle));\n    }\n\n    // if (includeLabelLength) {\n    //   nodeStartX += (node.x >= 0 ? -1 : 1) * actualNodeRadius;\n    //   nodeEndX += + (node.x >= 0 ? 1 : -1) * actualNodeRadius;\n    //   nodeStartY += (node.y >= 0 ? -1 : 1) * actualNodeRadius;\n    //   nodeEndY += (node.y >= 0 ? 1 : -1) * actualNodeRadius;\n    // }\n\n    if (nodeStartX < minX) {\n      minX = nodeStartX;\n    }\n    if (nodeEndX < minX) {\n      minX = nodeEndX;\n    }\n\n    if (nodeStartX > maxX) {\n      maxX = nodeStartX;\n    }\n    if (nodeEndX > maxX) {\n      maxX = nodeEndX;\n    }\n\n    if (nodeStartY < minY) {\n      minY = nodeStartY;\n    }\n    if (nodeEndY < minY) {\n      minY = nodeEndY;\n    }\n\n    if (nodeStartY > maxY) {\n      maxY = nodeStartY;\n    }\n    if (nodeEndY > maxY) {\n      maxY = nodeEndY;\n    }\n\n    if (node.isCollapsed) {\n      i += node.totalNodes - 1;\n      continue;\n    }\n  }\n\n  return ({\n    minX,\n    maxX,\n    minY,\n    maxY,\n  });\n}\n","export default function (tree) {\n  return {\n    x: (tree.ctx.canvas.width / 2) / tree.pixelRatio,\n    y: (tree.ctx.canvas.height / 2) / tree.pixelRatio,\n  };\n}\n","export default function (tree) {\n  const width = tree.state.size.width;\n  const height = tree.state.size.height;\n  const padding = tree.state.padding;\n  return ({\n    width,\n    height,\n    left: padding,\n    top: padding,\n    right: width - padding,\n    bottom: height - padding,\n  });\n}\n","import defaultOptions from '../defaults';\n\nexport default function (tree, options) {\n  return { ...defaultOptions, ...options };\n}\n","export default function (tree, node) {\n  const { styles } = tree.state;\n  return (node.id in styles && styles[node.id].label) || node.label || node.id;\n}\n","export default function (tree, nodeOrId) {\n  const virtualTree = tree.getVirtualTree();\n  const subtreeRoot = tree.getNodeById(nodeOrId || virtualTree.rootNode);\n  const ids = [];\n  for (let i = subtreeRoot.preIndex; i < subtreeRoot.preIndex + subtreeRoot.totalNodes; i++) {\n    if (virtualTree.preorderTraversal[i].isLeaf) {\n      ids.push(virtualTree.preorderTraversal[i].id);\n    }\n  }\n  return ids;\n}\n","export default function (tree, nodeOrId) {\n  const virtualTree = tree.getVirtualTree();\n  const subtreeRoot = tree.getNodeById(nodeOrId || virtualTree.rootNode);\n  const labels = [];\n  for (let i = subtreeRoot.preIndex; i < subtreeRoot.preIndex + subtreeRoot.totalNodes; i++) {\n    const node = virtualTree.preorderTraversal[i];\n    if (node.isLeaf) {\n      labels.push(tree.getLabel(node));\n    }\n  }\n  return labels;\n}\n","export default function (tree, nodeOrId, options = {}) {\n  const virtualTree = tree.layout();\n  const rootNode = nodeOrId ? tree.getNodeById(nodeOrId) : virtualTree.rootNode;\n  const { excludeCollapsed = true } = options;\n\n  const strings = [];\n  for (let i = rootNode.postIndex - rootNode.totalNodes + 1; i < rootNode.postIndex; i++) {\n    const node = virtualTree.postorderTraversal[i];\n    if (node.isLeaf) {\n      strings.push(`${tree.getLabel(node)}:${node.branchLength}`);\n    } else {\n      const chunks = strings.splice(strings.length - node.children.length, node.children.length);\n      if (excludeCollapsed && node.isCollapsed) {\n        strings.push(`[${node.totalLeaves} hidden ${node.totalLeaves === 1 ? 'leaf' : 'leaves'}]:${node.branchLength}`);\n      } else {\n        strings.push(`(${chunks.join(',')}):${node.branchLength}`);\n      }\n    }\n  }\n\n  return `(${strings.join(',')});`;\n}\n","import types from '../types';\nimport mapScalar from '../utils/mapScalar';\n\nexport default function (tree, x, y) {\n  const pad = (tree._.actualNodeSize / 2) + mapScalar(tree, 3);\n  const layout = tree.layout();\n\n  const { rootNode } = layout;\n  for (let i = rootNode.preIndex; i < rootNode.preIndex + rootNode.totalNodes; i++) {\n    const node = layout.preorderTraversal[i];\n    if (!node.isHidden && (x > node.x - pad) && (x < node.x + pad) && (y > node.y - pad) && (y < node.y + pad)) {\n      return node;\n    }\n  }\n\n  const typeDef = types[tree.state.type];\n  if (typeDef.getNodeAtPoint) {\n    return typeDef.getNodeAtPoint(tree, x, y, pad);\n  }\n\n  return null;\n}\n","/* eslint no-else-return: 0 */\n\nexport default function (tree, nodeOrId) {\n  const virtualTree = tree.getVirtualTree();\n  if (typeof(nodeOrId) === 'string') {\n    const node = virtualTree.nodeById[nodeOrId];\n\n    if (!node) {\n      tree.error('Cannot find node of ID=', nodeOrId);\n    }\n\n    return node;\n  } else {\n    const node = virtualTree.nodeById[nodeOrId.id];\n\n    if (!node || node !== nodeOrId) {\n      tree.error('Node not found', nodeOrId);\n    }\n\n    return node;\n  }\n}\n","export default function (tree, nodeIds) {\n  const labels = [];\n  for (const id of nodeIds) {\n    const node = tree.getNodeById(id);\n    if (node && node.isLeaf) {\n      labels.push(tree.getLabel(node));\n    }\n  }\n  return labels;\n}\n","import parse from '../utils/parse';\n\nexport default function (tree) {\n  const { state = {} } = tree;\n  let cache = tree.cache('virtual');\n\n  if (cache.get('source') !== state.source) {\n    const t0 = performance.now();\n\n    const { nodeById, rootNode, leafNodes, postorderTraversal, preorderTraversal } = parse(state.source);\n    tree.nodes = {\n      nodeById,\n      rootNode,\n      leafNodes,\n      postorderTraversal,\n      preorderTraversal,\n      source: state.source,\n      originalSource: state.source.original || state.source,\n    };\n\n    const t1 = performance.now();\n    tree.log('parsing virtual tree took ', (t1 - t0), ' milliseconds.');\n\n    tree._.cache = {};\n    cache = tree.cache('virtual');\n  }\n\n  if ((cache.get('rootId') || null) !== tree.state.rootId) {\n    const rootNode = tree.nodes.nodeById[tree.state.rootId] || tree.nodes.preorderTraversal[0];\n    const leafNodes = [];\n    rootNode.distanceFromRoot = 0;\n    for (let i = rootNode.preIndex + 1; i < rootNode.preIndex + rootNode.totalNodes; i++) {\n      const node = tree.nodes.preorderTraversal[i];\n      node.distanceFromRoot = node.parent.distanceFromRoot + node.branchLength;\n      if (node.isLeaf) {\n        leafNodes.push(node);\n      }\n    }\n    tree.nodes.leafNodes = leafNodes;\n    tree.nodes.rootNode = rootNode;\n  }\n\n  cache.set('source', state.source);\n  cache.set('rootId', tree.state.rootId);\n\n  return tree.nodes;\n}\n","export default function (tree, nodeOrId) {\n  const node = (typeof nodeOrId === 'string') ? tree.getNodeById(nodeOrId) : nodeOrId;\n\n  const highlightedId = (node && !node.isHidden) ? node.id : null;\n  if (tree._.highlightedId !== highlightedId) {\n    tree._.highlightedId = highlightedId;\n    tree.render();\n  }\n}\n","import getPixelRatio from '../utils/getPixelRatio';\n\nexport default function (tree, options) {\n  tree.state = tree.getInitialState(options);\n  tree.pixelRatio = getPixelRatio(tree.ctx);\n}\n","import types from '../types';\nimport rotateSubtree from '../utils/rotateSubtree';\n\nexport default function (tree) {\n  const { state } = tree;\n  const nodes = tree.getVirtualTree();\n  const cache = tree.cache('layout');\n\n  if (isNaN(nodes.maxLabelWidth) || cache.get('styles') !== state.styles) {\n    let maxLabel = '';\n\n    for (const node of nodes.leafNodes) {\n      const label = tree.getLabel(node);\n      if (label.length > maxLabel.length) {\n        maxLabel = label;\n      }\n    }\n    nodes.maxLabelWidth = tree.measureTextWidth(maxLabel);\n  }\n\n  if (cache.get('rotatedIds') !== state.rotatedIds) {\n    const rotatedIds = new Set(state.rotatedIds);\n    if (cache.get('rotatedIds')) {\n      for (const id of cache.get('rotatedIds')) {\n        const node = nodes.nodeById[id];\n        if (rotatedIds.has(node.id)) continue;\n        rotateSubtree(tree, nodes, node);\n        node.isInverted = false;\n      }\n    }\n    for (const id of state.rotatedIds) {\n      const node = nodes.nodeById[id];\n      if (node.isInverted) continue;\n      rotateSubtree(tree, nodes, node);\n      node.isInverted = true;\n    }\n  }\n\n  if (cache.get('collapsedIds') !== state.collapsedIds) {\n    const collapsedIds = new Set(state.collapsedIds);\n    for (let i = 0; i < nodes.postorderTraversal.length; i++) {\n      const node = nodes.preorderTraversal[i];\n      node.isCollapsed = collapsedIds.has(node.id);\n      if (node.parent && (node.parent.isCollapsed || node.parent.isHidden)) {\n        node.isHidden = true;\n      } else {\n        node.isHidden = false;\n      }\n    }\n\n    for (let i = 0; i < nodes.postorderTraversal.length; i++) {\n      const node = nodes.postorderTraversal[i];\n      if (node.isLeaf) {\n        node.visibleLeaves = 1;\n      } else {\n        if (node.isCollapsed) {\n          node.visibleLeaves = 1;\n        } else {\n          node.visibleLeaves = 0;\n          for (const child of node.children) {\n            node.visibleLeaves += child.visibleLeaves;\n          }\n        }\n      }\n    }\n  }\n\n  if (\n    cache.get('branchScale') !== state.branchScale ||\n    cache.get('collapsedIds') !== state.collapsedIds ||\n    cache.get('rootId') !== state.rootId ||\n    cache.get('rotatedIds') !== state.rotatedIds ||\n    cache.get('stepScale') !== state.stepScale ||\n    cache.get('type') !== state.type\n  ) {\n    const t0 = performance.now();\n\n    types[state.type].layoutNodes(tree, nodes);\n\n    const t1 = performance.now();\n    tree.log('layout nodes took ', (t1 - t0), ' milliseconds.');\n  }\n\n  cache.set('branchScale', state.branchScale);\n  cache.set('collapsedIds', state.collapsedIds);\n  cache.set('rootId', state.rootId);\n  cache.set('rotatedIds', state.rotatedIds);\n  cache.set('stepScale', state.stepScale);\n  cache.set('type', state.type);\n  cache.set('styles', state.styles);\n\n  return nodes;\n}\n","export default function (tree, text, weight = tree.state.fontWeight) {\n  const font = tree.ctx.font;\n  tree.ctx.font = `${weight} ${tree.state.fontSize}px ${tree.state.fontFamily}`;\n  const textMetrics = tree.ctx.measureText(text);\n  tree.ctx.font = font;\n  return Math.ceil(textMetrics.width + tree.state.fontSize);\n}\n","export default function (tree, state) {\n  tree.state = { ...tree.state, ...state };\n}\n","export default function (tree, nodes) {\n  const { state } = tree;\n\n  for (let i = nodes.rootNode.preIndex; i < nodes.rootNode.preIndex + nodes.rootNode.totalNodes; i++) {\n    const node = nodes.preorderTraversal[i];\n\n    if (state.selectedIds.indexOf(node.id) !== -1 || node.id === tree._.highlightedId) {\n      tree.drawHighlight(node);\n    }\n\n    if (node.isCollapsed) {\n      i += node.totalNodes - 1;\n    }\n  }\n\n  tree.ctx.restore();\n\n  tree.ctx.canvas.title = '';\n  if (tree.ctx.canvas.style) {\n    tree.ctx.canvas.style.cursor = tree._.highlightedId ? 'pointer' : '';\n  }\n}\n","/* eslint no-unused-vars: 0 */\n\nimport mapScalar from '../utils/mapScalar';\n\nexport default function (tree, layout) {\n  tree.ctx.save();\n\n  tree.ctx.clearRect(0, 0, tree.ctx.canvas.width, tree.ctx.canvas.height);\n\n  tree._.actualMaxLabelWidth = mapScalar(tree, layout.maxLabelWidth);\n  tree._.actualFontSize = mapScalar(tree, tree.state.fontSize);\n  tree._.actualNodeSize = mapScalar(tree, tree.state.nodeSize);\n  tree._.actualHaloRadius = mapScalar(\n    tree,\n    Math.max(\n      tree.state.nodeSize * 0.75,\n      tree.state.haloRadius\n    )\n  );\n  tree._.actualHaloWidth = mapScalar(tree, tree.state.haloWidth);\n\n  tree._.renderShapes = tree.state.showNodes;\n  tree._.renderLabels = tree.state.showLabels || (tree.state.stepScale * tree.state.scale >= tree.state.labelThreshold);\n\n  tree.ctx.textBaseline = 'middle';\n  tree.ctx.font = `${tree._.actualFontSize}px ${tree.state.fontFamily}`;\n  tree.ctx.lineWidth = mapScalar(tree, tree.state.lineWidth);\n  tree.ctx.strokeWidth = tree.ctx.lineWidth; // strokeWidth is required for drawing on SVG canvas\n\n  tree.ctx.translate(tree.state.offsetX * tree.pixelRatio, tree.state.offsetY * tree.pixelRatio);\n  tree.ctx.scale(tree.state.scale * tree.pixelRatio, tree.state.scale * tree.pixelRatio);\n}\n","import types from '../types';\n\nexport default function (tree) {\n  tree.resizeCanvas();\n  \n  const layout = tree.layout();\n\n  const t0 = performance.now();\n\n  tree.preRender(layout);\n\n  if (tree.state.styleNodeLines) {\n    for (const node of layout.postorderTraversal) {\n      if (node.isLeaf) {\n        const nodeStyle = tree.state.styles ? tree.state.styles[node.id] : undefined;\n        node.strokeStyle = (nodeStyle ? nodeStyle.strokeStyle : undefined) || tree.state.strokeStyle;\n      } else {\n        node.strokeStyle = node.children[0].strokeStyle;\n        for (const child of node.children) {\n          if (child.strokeStyle !== node.strokeStyle) {\n            node.strokeStyle = tree.state.strokeStyle;\n            break;\n          }\n        }\n      }\n    }\n  }\n\n  const startIndex = layout.rootNode.preIndex;\n  const stopIndex = layout.rootNode.preIndex + layout.rootNode.totalNodes;\n\n  for (let i = startIndex; i < stopIndex; i++) {\n    const node = layout.preorderTraversal[i];\n    if (node !== layout.rootNode) {\n      if (node.id === tree._.highlightedId) {\n        tree.ctx.strokeStyle = tree.state.highlightedStyle;\n      } else if (tree.state.styleNodeLines) {\n        tree.ctx.strokeStyle = node.strokeStyle;\n      } else {\n        tree.ctx.strokeStyle = tree.state.strokeStyle;\n      }\n\n      types[tree.state.type].drawLine(tree, layout, node);\n\n      // skip collapsed sub-trees\n      if (node.isCollapsed) {\n        i += node.totalNodes - 1;\n      }\n    }\n  }\n\n  for (let i = startIndex; i < stopIndex; i++) {\n    const node = layout.preorderTraversal[i];\n    tree.drawNode(layout, node);\n\n    // skip collapsed sub trees\n    if (node.isCollapsed) {\n      i += node.totalNodes - 1;\n    }\n  }\n\n  tree.postRender(layout);\n\n  const t1 = performance.now();\n\n  tree.log('render took ', (t1 - t0), ' milliseconds.');\n}\n","import resetView from '../functions/resetView';\n\nexport default function (tree, source) {\n  tree.setState(\n    resetView(tree, source),\n  );\n}\n","import resetCollapsedIds from '../functions/resetCollapsedIds';\nimport fitInPanel from './fitInPanel';\n\nexport default function (tree, { refit = false } = {}) {\n  return tree.setState(\n    tree.chain(\n      resetCollapsedIds,\n      refit ? fitInPanel : null\n    )\n  );\n}\n","import resize from '../functions/resize';\n\nexport default function (tree, width, height) {\n  tree.setState(\n    resize(tree, width, height)\n  );\n}\n","export default function (tree) {\n  const { width, height } = tree.state.size;\n  // guard because svg ctx.canvas has no style object\n  if (tree.ctx.canvas.style) {\n    tree.ctx.canvas.style.width = `${width}px`;\n    tree.ctx.canvas.style.height = `${height}px`;\n    tree.ctx.canvas.width = width * tree.pixelRatio;\n    tree.ctx.canvas.height = height * tree.pixelRatio;\n  }\n}\n","import rotateNode from '../functions/rotateNode';\n\nexport default function (tree, nodeOrId, { refit = false } = {}) {\n  const node = tree.getNodeById(nodeOrId);\n  if (node) {\n    tree.setState(\n      rotateNode(tree, node.id, refit)\n    );\n  }\n}\n","import setSelectedIds from '../functions/setSelectedIds';\n\nexport default function (tree, ids, append) {\n  if (ids && Array.isArray(ids)) {\n    tree.setState(\n      setSelectedIds(tree, ids, append)\n    );\n  }\n}\n","import { EmptyArray } from '../constants';\n\nexport default function (tree, ids, append = false) {\n  if (append) {\n    const selectedIds = new Set(tree.state.selectedIds);\n    for (const id of ids) {\n      selectedIds.add(id);\n    }\n    return {\n      selectedIds: Array.from(selectedIds),\n    };\n  }\n\n  return {\n    selectedIds: ids.length ? ids : EmptyArray,\n  };\n}\n","import { EmptyArray } from '../constants';\n\nimport selectLeaf from '../functions/selectLeaf';\nimport selectSubtree from '../functions/selectSubtree';\nimport deselect from '../functions/deselect';\n\nexport default function (tree, nodeOrId, append) {\n  const node = nodeOrId ? tree.getNodeById(nodeOrId) : null;\n\n  if (node && node.isLeaf) {\n    tree.setState(\n      selectLeaf(tree, node.id, append)\n    );\n  } else if (node) {\n    const ids = (node && !node.isHidden) ? tree.getLeafIds(node) : EmptyArray;\n    tree.setState(\n      selectSubtree(tree, ids, append)\n    );\n  } else {\n    tree.setState(\n      deselect(tree)\n    );\n  }\n}\n","import appendToArray from '../utils/appendToArray';\n\nexport default function (tree, id, append) {\n  const selectedIds = appendToArray(tree.state.selectedIds, id, append);\n  return {\n    selectedIds,\n  };\n}\n","export default function (tree, ids, append) {\n  if (append) {\n    const selection = new Set(tree.state.selectedIds);\n    for (const id of ids) {\n      selection.add(id);\n    }\n    return {\n      selectedIds: Array.from(selection),\n    };\n  }\n\n  return {\n    selectedIds: ids,\n  };\n}\n","import { EmptyArray } from '../constants';\n\nexport default function (tree) {\n  return {\n    selectedIds: EmptyArray,\n  };\n}\n","import types from '../types';\nimport setBranchScale from '../functions/setBranchScale';\n\nexport default function (tree, branchScale, point = tree.getCentrePoint()) {\n  const axis = types[tree.state.type].branchScalingAxis;\n\n  if (axis && branchScale > 0) {\n    tree.setState(\n      setBranchScale(tree, branchScale, point)\n    );\n  }\n}\n","export default function (tree, fontSize) {\n  if (typeof(fontSize) === 'number') {\n    tree.setState({ fontSize });\n  } else {\n    tree.error('Invalid font size value, expected number, got ', typeof(fontSize));\n  }\n}\n","import setRoot from '../functions/setRoot';\n\nexport default function (tree, nodeOrId) {\n  let node = null;\n  if (nodeOrId !== null) {\n    node = tree.getNodeById(nodeOrId);\n  }\n  tree.setState(\n    setRoot(tree, node ? node.id : null)\n  );\n}\n","import resetView from './resetView';\n\nexport default function (tree, rootId) {\n  return tree.chain(\n    () => ({ rootId }),\n    resetView,\n  );\n}\n","export default function (tree, scale, point = tree.getCentrePoint()) {\n  if (scale <= 0) {\n    return;\n  }\n\n  if (point) {\n    const scaleRatio = scale / tree.state.scale;\n    const offsetX = tree.state.offsetX;\n    tree.state.offsetX = offsetX + ((point.x) - ((point.x - offsetX) * scaleRatio + offsetX));\n    const offsetY = tree.state.offsetY;\n    tree.state.offsetY = offsetY + ((point.y) - ((point.y - offsetY) * scaleRatio + offsetY));\n  }\n\n  tree.state.scale = scale;\n\n  tree.render();\n}\n","import setSource from '../functions/setSource';\n\nexport default function (tree, source) {\n  tree.setState(\n    setSource(tree, source),\n  );\n}\n","import resetCollapsedIds from './resetCollapsedIds';\nimport resetRootId from './resetRootId';\nimport resetRotatedIds from './resetRotatedIds';\nimport resetView from './resetView';\n\nexport default function (tree, source) {\n  return tree.chain(\n    () => ({ source }),\n    resetRootId,\n    resetCollapsedIds,\n    resetRotatedIds,\n    resetView,\n  );\n}\n","export default function (tree, updater) {\n  if (updater) {\n    tree.mergeState(updater);\n    tree.render();\n  }\n}\n","import types from '../types';\nimport setStepScale from '../functions/setStepScale';\n\nexport default function (tree, stepScale, point = tree.getCentrePoint()) {\n  const axis = types[tree.state.type].stepScalingAxis;\n\n  if (axis && stepScale > 0) {\n    tree.setState(\n      setStepScale(tree, stepScale, point)\n    );\n  }\n}\n","import setType from '../functions/setType';\n\nexport default function (tree, type) {\n  tree.setState(\n    setType(tree, type),\n  );\n}\n","import resetView from './resetView';\n\nexport default function (tree, type) {\n  return tree.chain(\n    () => ({ type }),\n    resetView,\n  );\n}\n","export default function (tree) {\n  tree.setState({\n    alignLabels: !tree.state.alignLabels,\n  });\n}\n","export default function (tree) {\n  tree.setState({\n    renderLeafLabels: !tree.state.renderLeafLabels,\n  });\n}\n","import transform from '../functions/transform';\n\nexport default function (tree, dx = 0, dy = 0, dz = 0, point = tree.getCentrePoint()) {\n  if (dx !== 0 || dy !== 0 || dz !== 0) {\n    tree.setState(\n      transform(tree, dx, dy, dz, point)\n    );\n  }\n}\n","export default function (tree, eventName, args) {\n  const callback = tree[`on${eventName}`];\n  if (typeof(callback) === 'function') {\n    callback.apply(tree, args);\n  }\n}\n","import methods from '../methods';\n\nexport default function (tree) {\n  tree.error = console.error;\n  tree.log = () => {};\n\n  for (const name of Object.keys(methods)) {\n    tree[name] = methods[name].bind(null, tree);\n  }\n}\n","export default function mapPoint(tree, x = 0, y = 0) {\n  return {\n    x: (x - tree.state.offsetX) / tree.state.scale,\n    y: (y - tree.state.offsetY) / tree.state.scale,\n  };\n}\n","import getScaleBounds from '../functions/getScaleBounds';\n\nexport default function (viewport, padding, width, height) {\n  const { startPoint, centrePoint, endPoint } = viewport;\n  const canvasWidth = width - 2 * padding;\n  const canvasHeight = height - 2 * padding;\n  const xScale = canvasWidth / (endPoint.x - startPoint.x);\n  const yScale = canvasHeight / (endPoint.y - startPoint.y);\n  const scale = Math.min(xScale, yScale);\n  const offsetX = width / 2 - centrePoint.x * scale;\n  const offsetY = height / 2 - centrePoint.y * scale;\n  return {\n    offsetX,\n    offsetY,\n    scale,\n    ...getScaleBounds(scale),\n  };\n}\n","import getViewport from './getViewport';\nimport resize from './resize';\n\nimport restoreViewport from '../utils/restoreViewport';\n\nexport default function (tree, width, height) {\n  const { size } = tree.state;\n  if (size.width === width && size.height === height) {\n    return {};\n  }\n  const viewport = getViewport(tree);\n  return {\n    ...resize(tree, width, height),\n    ...restoreViewport(viewport, tree.state.padding, width, height),\n  };\n}\n","import mapPoint from '../utils/mapPoint';\n\nexport default function (tree) {\n  const { width, height } = tree.getDrawingArea();\n  const { minX, maxX, minY, maxY } = tree.getBounds();\n  const topLeftPoint = mapPoint(tree, tree.state.padding, tree.state.padding);\n  const bottomRightPoint = mapPoint(\n    tree,\n    width - tree.state.padding,\n    height - tree.state.padding\n  );\n  const centrePoint = mapPoint(tree, width / 2, height / 2);\n  const startPoint = {\n    x: Math.max(topLeftPoint.x, minX),\n    y: Math.max(topLeftPoint.y, minY),\n  };\n  const endPoint = {\n    x: Math.min(bottomRightPoint.x, maxX),\n    y: Math.min(bottomRightPoint.y, maxY),\n  };\n  return {\n    startPoint,\n    endPoint,\n    centrePoint,\n  };\n}\n","/* eslint max-params: 0 */\n\nimport applyPlugins from './utils/applyPlugins';\nimport bindMethods from './utils/bindMethods';\n\nimport fitInPanel from './functions/fitInPanel';\nimport resetBranchScale from './functions/resetBranchScale';\nimport resetCollapsedIds from './functions/resetCollapsedIds';\nimport resetRootId from './functions/resetRootId';\nimport resetRotatedIds from './functions/resetRotatedIds';\nimport resetStepScale from './functions/resetStepScale';\nimport resize from './functions/resize';\nimport restoreViewport from './functions/restoreViewport';\n\nexport default function (canvas, options = {}, plugins = []) {\n  const tree = {\n    canvas,\n    ctx: canvas.getContext('2d'),\n    state: {},\n    _: {\n      cache: {},\n    },\n  };\n\n  bindMethods(tree);\n\n  if (plugins.length) {\n    applyPlugins(tree, plugins);\n  }\n\n  tree.init(options);\n\n  if (options.source) {\n    const { width, height } = tree.ctx.canvas;\n    tree.setState(\n      tree.chain(\n        () =>\n          (tree.state.size\n            ? restoreViewport(tree, width, height)\n            : resize(tree, width, height)),\n        () => ({ source: options.source }),\n        () =>\n          (tree.state.rootId ? { rootId: tree.state.rootId } : resetRootId(tree)),\n        () =>\n          (tree.state.collapsedIds\n            ? { collapsedIds: tree.state.collapsedIds }\n            : resetCollapsedIds(tree)),\n        () =>\n          (tree.state.rotatedIds\n            ? { rotatedIds: tree.state.rotatedIds }\n            : resetRotatedIds(tree)),\n        () =>\n          (tree.state.stepScale\n            ? { stepScale: tree.state.stepScale }\n            : resetStepScale(tree)),\n        () =>\n          (tree.state.branchScale\n            ? { branchScale: tree.state.branchScale }\n            : resetBranchScale(tree)),\n        () => {\n          const { offsetX, offsetY, scale, minScale, maxScale } = fitInPanel(\n            tree\n          );\n          return {\n            offsetX: tree.state.offsetX || offsetX,\n            offsetY: tree.state.offsetY || offsetY,\n            scale: tree.state.scale || scale,\n            minScale: tree.state.minScale || minScale,\n            maxScale: tree.state.maxScale || maxScale,\n          };\n        }\n      )\n    );\n  }\n\n  return tree;\n}\n","/**\n * Maps a scalar value on the tree plane to a scalar value on the canvas plane.\n *\n * @param {Object} tree - a tree instance\n * @param {Number} value - the value to be mapped.\n *\n * @example <caption>Example usage of unmapScalar with a tree scale equals 2.</caption>\n * // returns 10\n * unmapScalar(tree, 5);\n *\n * @returns {Number} Mapped value\n */\nexport default function (tree, value) {\n  return value * tree.state.scale;\n}\n","import appendToArray from './appendToArray';\nimport getPixelRatio from './getPixelRatio';\nimport mapPoint from './mapPoint';\nimport mapScalar from './mapScalar';\nimport restoreViewport from './restoreViewport';\nimport unmapPoint from './unmapPoint';\nimport unmapScalar from './unmapScalar';\n\nexport default {\n  appendToArray,\n  getPixelRatio,\n  mapPoint,\n  mapScalar,\n  restoreViewport,\n  unmapPoint,\n  unmapScalar,\n};\n","export default function unmapPoint(tree, x = 0, y = 0) {\n  return {\n    x: (x * tree.state.scale) + tree.state.offsetX,\n    y: (y * tree.state.scale) + tree.state.offsetY,\n  };\n}\n","import * as constants from './constants';\nimport defaults from './defaults';\nimport createTree from './createTree';\nimport methods from './methods';\nimport types from './types';\nimport utils from './utils';\n\nexport default {\n  constants,\n  defaults,\n  createTree,\n  methods,\n  types,\n  utils,\n};\n\nexport {\n  constants,\n  defaults,\n  createTree,\n  methods,\n  types,\n  utils,\n};\n"],"sourceRoot":""}